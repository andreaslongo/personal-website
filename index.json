[{"content":" Verifying that one system can connect to another system via network is a common task for managing applications. A business application that is not interconnected to some other entity is hard to find.\nThis is a quick way to test some basic network connections on Windows without much dependencies. All you need is PowerShell and .NET which should already be included on most Windows hosts.\nYou create a custom TcpListener (which is an instance of a .NET class) to open up a port for TCP/IP connections.\nThen, you connect to this port from a remote system to verify the connection at a basic level.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.net.sockets.tcplistener\nCreate and start a custom listener (e.g. the server): PS server\u0026gt; $listener = [System.Net.Sockets.TcpListener]2383 PS server\u0026gt; $listener.Start() # Verify that ports are opened PS server\u0026gt; Get-NetTCPConnection -State Listen -LocalPort 2383 LocalAddress LocalPort RemoteAddress RemotePort State AppliedSetting OwningProcess ------------ --------- ------------- ---------- ----- -------------- ------------- 0.0.0.0 2383 0.0.0.0 0 Listen 840 Test the connection from a remote system (e.g. the client): PS client\u0026gt; Test-NetConnection \u0026lt;server\u0026gt; -Port 2383 ComputerName : server RemoteAddress : 10.0.0.2 RemotePort : 2383 InterfaceAlias : 10.0.0.100 SourceAddress : 10.0.0.100 TcpTestSucceeded : True Stop the listener when you are done: PS server\u0026gt; $listener.Stop() # Verify that ports are closed PS server\u0026gt; Get-NetTCPConnection -State Listen -LocalPort 2383 Get-NetTCPConnection : No matching MSFT_NetTCPConnection objects found by CIM query for instances of the ROOT/StandardCimv2/MSFT_NetTCPConnection class on the CIM server: SELECT * FROM MSFT_NetTCPConnection WHERE ((LocalPort = 2383)) AND ((State = 2)). Verify query parameters and retry. + CategoryInfo : ObjectNotFound: (MSFT_NetTCPConnection:String) [Get-NetTCPConnection], CimJobException + FullyQualifiedErrorId : CmdletizationQuery_NotFound,Get-NetTCPConnection ","permalink":"https://www.andreaslongo.com/blog/windows-testing-network-connections/","summary":"Verifying that one system can connect to another system via network is a common task for managing applications. A business application that is not interconnected to some other entity is hard to find.\nThis is a quick way to test some basic network connections on Windows without much dependencies. All you need is PowerShell and .NET which should already be included on most Windows hosts.\nYou create a custom TcpListener (which is an instance of a .","title":"Windows: Testing network connections"},{"content":" When working with centrally hosted applications on Windows, I often provide such programs as RemoteApp for a good user experience.\nA remote app runs remotely on a terminal server, but the look and feel for a user is more like a locally installed app on a client computer - e.g. the app has its own resizable window and its own taskbar entry.\nPublishing a remote app For publishing remote apps, I use a variation of the following command. This is not only faster than working with the Server Manager GUI, but you also have more control over the resulting app with additional options that are not available via GUI.\nRun PowerShell as admin: # Change the arguments below. $arguments = @{ Alias = \u0026#39;remote-app-01\u0026#39; CollectionName = \u0026#39;remote-apps\u0026#39; CommandLineSetting = \u0026#39;DoNotAllow\u0026#39; DisplayName = \u0026#39;Remote App 1\u0026#39; FilePath = \u0026#39;D:\\bin\\app.exe\u0026#39; FolderName = \u0026#39;Business applications\u0026#39; ShowInWebAccess = $true } New-RDRemoteApp @arguments Reference: New-RDRemoteApp\nDownloading a remote app If you need a .rdp file to distribute the app:\nOn the RDS host\nOpen the Internet Information Services (IIS) Manager.\nNavigate to Sites \u0026gt; Default Web Site \u0026gt; RDWeb.\nIn the Actions menu on the right side, click on Browse Application.\nThis should open the RDS web page with the Edge browser. Note that you cannot download RDP apps with Internet Explorer.\nIf you get a certificate warning, accept it and continue.\nLogin with your account.\nNote that your account needs access to the Collection, otherwise the web page will be blank.\nFind the RDP app and click on it.\nThis should start the download.\n","permalink":"https://www.andreaslongo.com/blog/windows-publish-rdp-app/","summary":"When working with centrally hosted applications on Windows, I often provide such programs as RemoteApp for a good user experience.\nA remote app runs remotely on a terminal server, but the look and feel for a user is more like a locally installed app on a client computer - e.g. the app has its own resizable window and its own taskbar entry.\nPublishing a remote app For publishing remote apps, I use a variation of the following command.","title":"Windows: Publishing a remote terminal app"},{"content":" I use GPG to sign Git tags.\nThis is a list of signing errors I encountered and possible solutions.\n# Error: $ git tag --sign --message \u0026#39;Release 2023.07.13\u0026#39; 2023.07.13 # --snip-- gpg: signing failed: No pinentry error: unable to sign the tag # Problem: # This can happen in a container if GPG cannot find a tool to ask the user for a passphrase. # https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html # Solution: dnf install pinentry # Error: $ git tag --sign --message \u0026#39;Release 2023.07.13\u0026#39; 2023.07.13 # --snip-- gpg: signing failed: Inappropriate ioctl for device error: unable to sign the tag # Problem: # Missing environment variable for the gpg-agent. # https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html # Solution: export GPG_TTY=$(tty) ","permalink":"https://www.andreaslongo.com/blog/git-signing-errors/","summary":"I use GPG to sign Git tags.\nThis is a list of signing errors I encountered and possible solutions.\n# Error: $ git tag --sign --message \u0026#39;Release 2023.07.13\u0026#39; 2023.07.13 # --snip-- gpg: signing failed: No pinentry error: unable to sign the tag # Problem: # This can happen in a container if GPG cannot find a tool to ask the user for a passphrase. # https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html # Solution: dnf install pinentry # Error: $ git tag --sign --message \u0026#39;Release 2023.","title":"Git: Fixing GPG signing errors"},{"content":" I often record a short screencast to document some process rather than taking a long series of screenshots. To me this is more effective to produce and most of the time also more convenient to consume later on. When I need some screenshots for written or printed documentation, I take them from the screencast after the fact.\nFor recording, I use the GNOME builtin recorder. It is instantaneously ready to use and requires no fiddling with settings or file paths. It creates WebM videos without audio.\nSometimes the recorder crashes. I then only see the first recorded frame when viewing the resulting video and I also cannot skip to a later position in the video. The file size and the playback timeline however indicate that there must be more video data in the file.\nTo be fair, crashes are quite rare and only happened to me when my PC went to sleep or locked the screen during an active recording - it was my fault.\nFixing videos I use FFmpeg in stream copy mode for this which is very fast:\nffmpeg -i ./bad_video.webm -codec copy ./fixed_video.webm We can also run this in a container:\npodman/docker container run \\ --interactive \\ --pull=newer \\ --rm \\ --tty \\ --volume \u0026#34;${PWD}\u0026#34;:/config:Z,rw \\ --workdir /config \\ linuxserver/ffmpeg:latest \\ -i ./bad_video.webm \\ -codec copy \\ ./fixed_video.webm The same as above, but wrapped in a shell script for easy usage:\nffmpeg.sh #!/usr/bin/env bash podman container run \\ --interactive \\ --pull=newer \\ --rm \\ --tty \\ --volume \u0026#34;${PWD}\u0026#34;:/config:Z,rw \\ --workdir /config \\ docker.io/linuxserver/ffmpeg:latest \\ \u0026#34;${@}\u0026#34; Use it like this:\nffmpeg.sh -i ./bad_video.webm -codec copy ./fixed_video.webm Let me know if you have more tips and tricks for fixing videos or if you have other use cases for FFmpeg.\n","permalink":"https://www.andreaslongo.com/blog/repairing-videos-ffmpeg/","summary":"I often record a short screencast to document some process rather than taking a long series of screenshots. To me this is more effective to produce and most of the time also more convenient to consume later on. When I need some screenshots for written or printed documentation, I take them from the screencast after the fact.\nFor recording, I use the GNOME builtin recorder. It is instantaneously ready to use and requires no fiddling with settings or file paths.","title":"Repairing video files with FFmpeg"},{"content":" There is no equivalent to the Unix watch command on Windows, but you can get close enough behavior.\nWatching commands with PowerShell # Similar to `watch \u0026lt;command\u0026gt;` PS\u0026gt; while ($true) {\u0026lt;your command\u0026gt;; sleep -Seconds 2} PS\u0026gt; while ($true) {(Get-Service -Name \u0026#39;Remote Desktop Services\u0026#39;).Status; sleep -Seconds 2} Running Running You can also follow log file output similar to the Unix tail command.\nTailing logs with PowerShell: # Similar to `tail --follow \u0026lt;filename\u0026gt;` PS\u0026gt; Get-Content -Path \u0026lt;logfile\u0026gt; -Tail 10 –Wait PS\u0026gt; Get-Content -Path \u0026#39;C:\\app.log\u0026#39; -Tail 10 –Wait ","permalink":"https://www.andreaslongo.com/blog/powershell-watch/","summary":"There is no equivalent to the Unix watch command on Windows, but you can get close enough behavior.\nWatching commands with PowerShell # Similar to `watch \u0026lt;command\u0026gt;` PS\u0026gt; while ($true) {\u0026lt;your command\u0026gt;; sleep -Seconds 2} PS\u0026gt; while ($true) {(Get-Service -Name \u0026#39;Remote Desktop Services\u0026#39;).Status; sleep -Seconds 2} Running Running You can also follow log file output similar to the Unix tail command.\nTailing logs with PowerShell: # Similar to `tail --follow \u0026lt;filename\u0026gt;` PS\u0026gt; Get-Content -Path \u0026lt;logfile\u0026gt; -Tail 10 –Wait PS\u0026gt; Get-Content -Path \u0026#39;C:\\app.","title":"Unix-like `watch` and `tail` commands for PowerShell"},{"content":" You can use the SQL Server Configuration Manager to configure an alias for connections to a MSSQL instance.\nBut on some versions of Windows, the configuration manager is not available as a regular application. You might find it as a snap-in for the Microsoft Management Console (MMC).\nIf the configuration manager is generally not available on your system, you can instead use this tools to set an alias:\n# 64 bit version C:\\Windows\\System32\\cliconfg.exe # 32 bit version C:\\Windows\\SysWOW64\\cliconfg.exe ","permalink":"https://www.andreaslongo.com/blog/mssql-connection-alias/","summary":"You can use the SQL Server Configuration Manager to configure an alias for connections to a MSSQL instance.\nBut on some versions of Windows, the configuration manager is not available as a regular application. You might find it as a snap-in for the Microsoft Management Console (MMC).\nIf the configuration manager is generally not available on your system, you can instead use this tools to set an alias:\n# 64 bit version C:\\Windows\\System32\\cliconfg.","title":"MSSQL: Configure an alias for SQL connections"},{"content":" You can save the state of a running container as a new image. This is somewhat similar to \u0026#34;creating a snapshot\u0026#34; when working with virtual machines.\nIf you use Docker, just replace podman with docker in the below commands.\n$ podman container commit \u0026lt;container name or id\u0026gt; \u0026lt;new-image:tag\u0026gt; $ podman container commit ansible ansible:2022-04-11 ","permalink":"https://www.andreaslongo.com/blog/container-snapshot-image/","summary":" You can save the state of a running container as a new image. This is somewhat similar to \u0026#34;creating a snapshot\u0026#34; when working with virtual machines.\nIf you use Docker, just replace podman with docker in the below commands.\n$ podman container commit \u0026lt;container name or id\u0026gt; \u0026lt;new-image:tag\u0026gt; $ podman container commit ansible ansible:2022-04-11 ","title":"Creating a new image from a running container"},{"content":" Given you have created a pull request (PR) with a single commit on GitHub. The commit is not GPG-signed. The maintainer asks you to sign the commit.\nIf you are the only one working (committing) to this PR, you can force-push a signed commit.\n# Sign the latest commit on your local repository git commit --amend --no-edit --gpg-sign # Force push the commit to your remote repository (fork) git push --force-with-lease GitHub will automatically update your PR.\n","permalink":"https://www.andreaslongo.com/blog/git-signing-pushed-commits/","summary":"Given you have created a pull request (PR) with a single commit on GitHub. The commit is not GPG-signed. The maintainer asks you to sign the commit.\nIf you are the only one working (committing) to this PR, you can force-push a signed commit.\n# Sign the latest commit on your local repository git commit --amend --no-edit --gpg-sign # Force push the commit to your remote repository (fork) git push --force-with-lease GitHub will automatically update your PR.","title":"Git: Signing an already pushed commit"},{"content":" Asciidoctor, has good support for diagrams with the Diagram plugin.\nTo make this work with Hugo, a static site generator, you need:\na working asciidoctor-diagram plugin\nsome settings in your Hugo site config\nThen run hugo --destination public to generate your site including all diagrams. Have a look at my example repository to get an idea of how this works.\n","permalink":"https://www.andreaslongo.com/blog/asciidoc-diagram-hugo/","summary":"Asciidoctor, has good support for diagrams with the Diagram plugin.\nTo make this work with Hugo, a static site generator, you need:\na working asciidoctor-diagram plugin\nsome settings in your Hugo site config\nThen run hugo --destination public to generate your site including all diagrams. Have a look at my example repository to get an idea of how this works.","title":"Generating diagrams from AsciiDoc with Hugo"},{"content":" Use quotes for the remote side of your command.\nCopying multiple files from remote to local: $ scp \u0026#39;remote-host:path/source-file*\u0026#39; ./local-target source-file1.png 100% 10KB 180.1KB/s 00:00 source-file2.png 100% 17KB 282.7KB/s 00:00 source-file3.png 100% 12KB 274.4KB/s 00:00 With quotes, wildcards are expanded by the remote shell instead of your local shell which cannot see the remote files.\n","permalink":"https://www.andreaslongo.com/blog/scp-wildcards/","summary":"Use quotes for the remote side of your command.\nCopying multiple files from remote to local: $ scp \u0026#39;remote-host:path/source-file*\u0026#39; ./local-target source-file1.png 100% 10KB 180.1KB/s 00:00 source-file2.png 100% 17KB 282.7KB/s 00:00 source-file3.png 100% 12KB 274.4KB/s 00:00 With quotes, wildcards are expanded by the remote shell instead of your local shell which cannot see the remote files.","title":"SSH: Using wildcards with `scp` to copy remote files"},{"content":" Be careful. Renaming tags might be difficult depending on your situation.\nThere is no single step for renaming a tag. You must create a new tag with a new name and then delete the old tag.\nWhat you should know TLDR: When replacing tags, make sure that your new tag points to a commit object and not to an old tag object.\nGit has the following types of tags:\nAnnotated tag\nGPG-signed tag\nLightweight tag\nAn annotated tag is a Git object. A GPG-signed tag is an annotated tag and therefore also a Git object. Both can point to other Git objects e.g. commits, including other annotated tags. This can lead to chains of annotated tags which can break if you delete a tag in between.\nA lightweight tag is not a Git object. It is just a name or label for an object, usually a commit object.\nRenaming tags First step Review the commit logs and identify the tag you want to rename.\ngit log --decorate --graph --oneline You want to know if the tag is lightweight or annotated. You also want to know if the tag has been pushed to other remote repositories. Others might rely on this tag if it is pushed.\nRenaming an annotated tag (local) If you have an annotated tag which is local only: Not yet pushed to a remote repository.\n(optional) Preserving the date of the tag: # Get the date of the old tag git show --date=iso \u0026lt;old\u0026gt; git show --date=iso first-release # Set the date for the new tag via environment variable export GIT_COMMITTER_DATE=\u0026#34;\u0026lt;date\u0026gt;\u0026#34; export GIT_COMMITTER_DATE=\u0026#34;2021-01-22 16:24:39 +0100\u0026#34; Renaming the tag: # Create a new tag git tag --annotate \u0026lt;new\u0026gt; \u0026#39;\u0026lt;old\u0026gt;^{}\u0026#39; git tag --annotate v1.0 \u0026#39;first-release^{}\u0026#39; # Delete the old tag git tag --delete \u0026lt;old\u0026gt; git tag --delete first-release Renaming a GPG-signed tag: # Create a new tag git tag --sign \u0026lt;new\u0026gt; \u0026#39;\u0026lt;old\u0026gt;^{}\u0026#39; git tag --sign v1.0 \u0026#39;first-release^{}\u0026#39; # Delete the old tag git tag --delete \u0026lt;old\u0026gt; git tag --delete first-release The ^{} suffix tells Git to dereference the tag recursively until it finds an object which is not a tag. This ensures that your new tag does not point to another tag which you might also want to rename.\nRenaming a lightweight tag (local) If you have a lightweight tag which is local only: Not yet pushed to a remote repository.\nRenaming the tag: # Create a new tag git tag \u0026lt;new\u0026gt; \u0026lt;old\u0026gt; # Delete the old tag git tag --delete \u0026lt;old\u0026gt; Additional steps for pushed tags (remote) If your tag has been pushed to a remote repository, follow the steps above first. Then continue here.\n# Push the newly created tag git push --tags \u0026lt;new tag\u0026gt; # Delete the old tag from the remote git push --delete \u0026lt;remote\u0026gt; \u0026lt;old tag\u0026gt; git push --delete origin first-release Other users will receive a \u0026#34;renamed\u0026#34; tag as new tag from your remote repository. Git will not delete old tags automatically.\nYou should remove deleted tags from local repositories.\nDeleting tags from local that no longer exist on the remote: git pull --prune --tags ","permalink":"https://www.andreaslongo.com/blog/git-rename-tags/","summary":"Be careful. Renaming tags might be difficult depending on your situation.\nThere is no single step for renaming a tag. You must create a new tag with a new name and then delete the old tag.\nWhat you should know TLDR: When replacing tags, make sure that your new tag points to a commit object and not to an old tag object.\nGit has the following types of tags:","title":"Git: Renaming tags"},{"content":" We can set the desired image pull policy during container startup.\nPodman/docker $ podman/docker container run --pull=always $ podman/docker container run --pull=newer Kubernetes spec: containers: - name: \u0026lt;name\u0026gt; imagePullPolicy: Always ","permalink":"https://www.andreaslongo.com/blog/container-auto-update-images/","summary":" We can set the desired image pull policy during container startup.\nPodman/docker $ podman/docker container run --pull=always $ podman/docker container run --pull=newer Kubernetes spec: containers: - name: \u0026lt;name\u0026gt; imagePullPolicy: Always ","title":"Auto updating container images"},{"content":" Removing a remote tag:\n$ git push --delete \u0026lt;remote\u0026gt; \u0026lt;tag\u0026gt; $ git push --delete origin v1.0 Removing multiple remote tags:\n$ git push --delete \u0026lt;remote\u0026gt; \u0026lt;tag-1\u0026gt; \u0026lt;tag-2\u0026gt; \u0026lt;...\u0026gt; $ git push --delete origin v1.0 ","permalink":"https://www.andreaslongo.com/blog/git-delete-tags/","summary":" Removing a remote tag:\n$ git push --delete \u0026lt;remote\u0026gt; \u0026lt;tag\u0026gt; $ git push --delete origin v1.0 Removing multiple remote tags:\n$ git push --delete \u0026lt;remote\u0026gt; \u0026lt;tag-1\u0026gt; \u0026lt;tag-2\u0026gt; \u0026lt;...\u0026gt; $ git push --delete origin v1.0 ","title":"Git: Deleting remote tags"},{"content":" Adding additional space to a LVM logical volume.\n$ sudo lvextend --resizefs --size \u0026lt;size\u0026gt; \u0026lt;group\u0026gt;/\u0026lt;volume\u0026gt; $ sudo lvextend --resizefs --size +2G centos/root Adding 100% of the available free space.\n$ sudo lvextend --resizefs --extents +100%FREE centos/root ","permalink":"https://www.andreaslongo.com/blog/unix-lvm-extend-logical-volume/","summary":" Adding additional space to a LVM logical volume.\n$ sudo lvextend --resizefs --size \u0026lt;size\u0026gt; \u0026lt;group\u0026gt;/\u0026lt;volume\u0026gt; $ sudo lvextend --resizefs --size +2G centos/root Adding 100% of the available free space.\n$ sudo lvextend --resizefs --extents +100%FREE centos/root ","title":"LVM: Extending a logical volume"},{"content":" Zsh config files and the order of sourcing during startup.\n1 ~/.zshenv always sourced\n2 ~/.zprofile sourced if login shell\n3 ~/.zshrc sourced if interactive shell\n4 ~/.zlogin sourced if login shell\n5 ~/.zlogout sourced when exiting shell\n","permalink":"https://www.andreaslongo.com/blog/zsh-config-files/","summary":"Zsh config files and the order of sourcing during startup.\n1 ~/.zshenv always sourced\n2 ~/.zprofile sourced if login shell\n3 ~/.zshrc sourced if interactive shell\n4 ~/.zlogin sourced if login shell\n5 ~/.zlogout sourced when exiting shell","title":"Zsh: Configuration files"},{"content":" You can run commands from Cygwin with elevated permissions.\nOn Windows, you have something like Run as different user or Run as administrator. And on Linux, you probably use the sudo command for this.\nTo get similar functionality on Cygwin, you can add a new alias to your shell’s config file. The following is for Zsh, but it should also work for other bash-like shells.\n~/.zshrc alias sudo=\u0026#39;cygstart --action=runas\u0026#39; Now you can run something like this to test the alias.\n$ sudo touch sudo-test Windows will ask for your username and password. Then it will run the command in the context of the given user.\nThat works, but the user experience is not great.\nYour command gets executed in a new Cygwin process which automatically exits when the command returns. Also, the user prompt is GUI based which interrupts your CLI workflow.\n","permalink":"https://www.andreaslongo.com/blog/cygwin-sudo-command/","summary":"You can run commands from Cygwin with elevated permissions.\nOn Windows, you have something like Run as different user or Run as administrator. And on Linux, you probably use the sudo command for this.\nTo get similar functionality on Cygwin, you can add a new alias to your shell’s config file. The following is for Zsh, but it should also work for other bash-like shells.\n~/.zshrc alias sudo=\u0026#39;cygstart --action=runas\u0026#39; Now you can run something like this to test the alias.","title":"Cygwin: A `sudo` like command"},{"content":" You can define the default home directory for all Cygwin users in the nsswitch.conf file.\nFor example, the following sets your default home directory to /cygdrive/c/Users/{user_name}/home, or in Windows notation to C:\\Users\\{user_name}\\home.\n/etc/nsswitch.conf db_home: /%H/home You can change it to whatever you like.\nSee the Cygwin documentation for more information. Look here below the /path section for more on supported wildcard characters.\n","permalink":"https://www.andreaslongo.com/blog/cygwin-change-default-home-dir/","summary":"You can define the default home directory for all Cygwin users in the nsswitch.conf file.\nFor example, the following sets your default home directory to /cygdrive/c/Users/{user_name}/home, or in Windows notation to C:\\Users\\{user_name}\\home.\n/etc/nsswitch.conf db_home: /%H/home You can change it to whatever you like.\nSee the Cygwin documentation for more information. Look here below the /path section for more on supported wildcard characters.","title":"Cygwin: Change the default home directory"},{"content":" To use the Windows clipboard in Vim on Cygwin, add the following to your Vim config file.\n.vimrc set clipboard=unnamed Vim will now use the clipboard register * for yank, delete, change and put operations. The * register gets synced with the Windows clipboard automatically.\n","permalink":"https://www.andreaslongo.com/blog/cygwin-vim-clipboard/","summary":"To use the Windows clipboard in Vim on Cygwin, add the following to your Vim config file.\n.vimrc set clipboard=unnamed Vim will now use the clipboard register * for yank, delete, change and put operations. The * register gets synced with the Windows clipboard automatically.","title":"Cygwin: Using the clipboard with Vim"},{"content":" Traditionally, system administrators use Active Directory (AD) basic user accounts with limited permissions to run a service (Service Account).\nManaged Service Accounts (MSA) are special accounts to eliminate the need for administrators to manually manage the credentials, passwords, and SPNs of traditional service accounts. Also, with MSAs these tasks no longer disrupt a service (no downtime).\nPro Administration Automatic password changes. No manual password management.\nAvailability No service downtime for password changes.\nSecurity Frequent password changes. User login to systems via MSA is not possible.\nCon Initial Setup Initial setup and troubleshooting is more complex for MSAs than with basic user accounts.\nTypes of managed service accounts There are three types of managed service accounts.\nVirtual Account Local system account for local services. Access to network resources is only possible via computer identity.\nManaged Service Account (MSA) Active Directory account for generic services.\nGroup Managed Service Account (gMSA) Active Directory account for cluster services.\nRequirements Use the PowerShell to work with managed service accounts. Install and import the following module on the system on which you want to use MSAs.\n$ Install-WindowsFeature RSAT-AD-PowerShell $ Import-Module ActiveDirectory Docs: Remote Server Administration Tools (RSAT) for Windows, ActiveDirectory\nCreate a managed service account in Active Directory $ New-ADServiceAccount \u0026lt;account name\u0026gt; -RestrictToSingleComputer Docs: New-ADServiceAccount\nInstall a managed service account on a system Before you can use an MSA, you have to install it on the target system.\n$ Install-ADServiceAccount \u0026lt;account name\u0026gt; You can test the MSA from the system.\n$ Test-ADServiceAccount \u0026lt;account name\u0026gt; True Now, use the Services console Services.msc to configure a service to use the MSA.\nLeave the password blank.\nEnsure that the account name ends with a dollar sign $.\nStart or restart the service.\nDocs: Install-ADServiceAccount, Test-ADServiceAccount\nRemove a managed service account You should remove an MSA from the system if it is no longer needed.\n$ Uninstall-ADServiceAccount \u0026lt;account name\u0026gt; Docs: Uninstall-ADServiceAccount\nReset the password for a managed service account Active Directory manages MSA passwords automatically. You don’t have to do anything. Should you still have to reset the password manually, you can do so.\n$ Reset-ADServiceAccountPassword \u0026lt;account name\u0026gt; Docs: Reset-ADServiceAccountPassword\nTroubleshooting A service does not start with a managed service account Confirm that the MSA exists and is enabled in Active Directory. $ Get-ADServiceAccount \u0026lt;account name\u0026gt; DistinguishedName : CN=msa-sql01,CN=Managed Service Accounts,DC=example,DC=com Enabled : True Name : msa-sql01 ObjectClass : msDS-ManagedServiceAccount ObjectGUID : 12345a13-12e3-1c23-b456-a123e123fd78 SamAccountName : msa-sql01$ SID : S-1-5-21-1234567890-1234567890-098765432-184195 UserPrincipalName : Confirm that the account is installed on the system $ Install-ADServiceAccount \u0026lt;account name\u0026gt; Confirm that the account has the SeServiceLogonRight permission $ NTRights +r SeServiceLogonRight –u \u0026lt;account name\u0026gt; Docs: Get-ADServiceAccount, Install-ADServiceAccount, NTRIGHTS.exe (Windows Server 2003 Resource Kit Tools)\n","permalink":"https://www.andreaslongo.com/blog/windows-ad-managed-service-accounts/","summary":"Traditionally, system administrators use Active Directory (AD) basic user accounts with limited permissions to run a service (Service Account).\nManaged Service Accounts (MSA) are special accounts to eliminate the need for administrators to manually manage the credentials, passwords, and SPNs of traditional service accounts. Also, with MSAs these tasks no longer disrupt a service (no downtime).\nPro Administration Automatic password changes. No manual password management.\nAvailability No service downtime for password changes.","title":"Active Directory: Managed service accounts"},{"content":" I was looking for a uptime like command for Windows.\nThe uptime command on Linux: $ uptime 12:53:36 up 5:03, 1 user, load average: 0.83, 0.61, 0.36 $ uptime --pretty up 5 hours, 3 minutes $ uptime --since 2021-02-17 07:50:35 On Windows, there is the cmdlet Get-Uptime which is available for PowerShell version 6+.\n$ Get-Uptime -Since Monday, January 18, 2021 7:56:57 AM If Get-Uptime is not available, you can query the WMI with a CIM cmdlet.\n$ Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object LastBootUpTime LastBootUpTime -------------- 18.01.2021 07:56:41 The LastBootUpTime value may not be updated if you have fast boot/startup enabled for your system.\n","permalink":"https://www.andreaslongo.com/blog/windows-get-uptime/","summary":"I was looking for a uptime like command for Windows.\nThe uptime command on Linux: $ uptime 12:53:36 up 5:03, 1 user, load average: 0.83, 0.61, 0.36 $ uptime --pretty up 5 hours, 3 minutes $ uptime --since 2021-02-17 07:50:35 On Windows, there is the cmdlet Get-Uptime which is available for PowerShell version 6+.\n$ Get-Uptime -Since Monday, January 18, 2021 7:56:57 AM If Get-Uptime is not available, you can query the WMI with a CIM cmdlet.","title":"Getting the uptime from Windows"},{"content":" Recursively search for files by name with find. Then, sort the result by time, newest first with ls -lt.\n$ find . -type f -name \u0026#34;Makefile*\u0026#34; -exec ls -lt {} + -rw------- 1 al al 1916 Feb 17 12:44 ./cc-python/{{cookiecutter.project_repository}}/Makefile -rw------- 1 al al 1862 Feb 17 12:41 ./data-api/Makefile -rw------- 1 al al 963 Feb 16 15:45 ./personal-website/Makefile -rw------- 1 al al 254 Feb 15 17:07 ./cc-python/Makefile ","permalink":"https://www.andreaslongo.com/blog/unix-find-files-sorted-by-time/","summary":" Recursively search for files by name with find. Then, sort the result by time, newest first with ls -lt.\n$ find . -type f -name \u0026#34;Makefile*\u0026#34; -exec ls -lt {} + -rw------- 1 al al 1916 Feb 17 12:44 ./cc-python/{{cookiecutter.project_repository}}/Makefile -rw------- 1 al al 1862 Feb 17 12:41 ./data-api/Makefile -rw------- 1 al al 963 Feb 16 15:45 ./personal-website/Makefile -rw------- 1 al al 254 Feb 15 17:07 ./cc-python/Makefile ","title":"Searching for files and sort them by date"},{"content":" Converting from datetime to string Use the datetime.strftime() method to convert a Python datetime object to a string of any format.\n\u0026gt;\u0026gt;\u0026gt; from datetime import datetime \u0026gt;\u0026gt;\u0026gt; dt = datetime(2009, 10, 1, 20, 36, 41) \u0026gt;\u0026gt;\u0026gt; dt.strftime(\u0026#39;%d.%m.%Y %H:%M:%S\u0026#39;) \u0026#39;01.10.2009 20:36:41\u0026#39; The argument to datetime.strftime() is a format string build with format codes. See strftime() and strptime() Format Codes for a list of available format codes.\nConverting from string to datetime Use the datetime.strptime() method to parse a string of any format representing a date and time to a datetime object.\n\u0026gt;\u0026gt;\u0026gt; from datetime import datetime \u0026gt;\u0026gt;\u0026gt; timestamp = \u0026#39;01.10.2009 20:36:41\u0026#39; \u0026gt;\u0026gt;\u0026gt; datetime.strptime(timestamp, \u0026#39;%d.%m.%Y %H:%M:%S\u0026#39;) datetime.datetime(2009, 10, 1, 20, 36, 41) The second argument to datetime.strptime() is again a format string (see above).\n","permalink":"https://www.andreaslongo.com/blog/python-convert-datetime-from-string/","summary":"Converting from datetime to string Use the datetime.strftime() method to convert a Python datetime object to a string of any format.\n\u0026gt;\u0026gt;\u0026gt; from datetime import datetime \u0026gt;\u0026gt;\u0026gt; dt = datetime(2009, 10, 1, 20, 36, 41) \u0026gt;\u0026gt;\u0026gt; dt.strftime(\u0026#39;%d.%m.%Y %H:%M:%S\u0026#39;) \u0026#39;01.10.2009 20:36:41\u0026#39; The argument to datetime.strftime() is a format string build with format codes. See strftime() and strptime() Format Codes for a list of available format codes.\nConverting from string to datetime Use the datetime.","title":"Python: Converting `datetime` and `string` types"},{"content":" You can retrieve the state of your text as it was some time ago. This concept is called undo tree or undo branches.\nMoving through the undo tree Go to newer/older text state.\ng+ g- Go to older text state, 10 minutes before.\n:earlier 10m Go to newer text state, 5 minutes later.\n:later 5m Using g- and g+ will get you to all possible text states while repeating u and CTRL-R does not.\nSee also :help undo-branches.\n","permalink":"https://www.andreaslongo.com/blog/vim-undo-branches/","summary":"You can retrieve the state of your text as it was some time ago. This concept is called undo tree or undo branches.\nMoving through the undo tree Go to newer/older text state.\ng+ g- Go to older text state, 10 minutes before.\n:earlier 10m Go to newer text state, 5 minutes later.\n:later 5m Using g- and g+ will get you to all possible text states while repeating u and CTRL-R does not.","title":"Vim: Undo branches"},{"content":" These two plugins might come in handy if you are a developer or consumer of web APIs (e.g. REST).\nThey allow you to send requests to your API and receive responses without leaving your editor. You can quickly explore APIs while saving your calls along the way as simple text file for documentation and sharing. They might supplement or replace tools like curl or Postman in your workflow.\nThis plugin is for Vim. It is a wrapper around curl.\nThis plugin is for Visual Studio Code. It is similar to the Vim plugin.\nClean and easy requests With both plugins, you write your API request as text block in your editor and sent it to your API endpoint on demand. The response then shows up in a new editor buffer/window.\nYou can write multiple request blocks in the same file and send them separately on demand.\nSave the file for later reference and share it with others as an example.\nThe syntax for the two plugins is slightly different. You cannot use a Vim request block directly with VS Code. But it is straightforward to adjust the request block to make it work.\nTo send requests\nType in a request block.\nPlace the cursor anywhere within the block.\nHit the trigger key to send the request (default: CTRL-J).\nVim ./example.rest # vim: set filetype=rest # global curl options --silent --include -- # GET https://reqres.in GET /api/users/2 # POST https://reqres.in POST /api/users { \u0026#34;name\u0026#34;: \u0026#34;andreas\u0026#34;, \u0026#34;job\u0026#34;: \u0026#34;consultant\u0026#34; } # DELETE https://reqres.in DELETE /api/users/2 Tip You can add query parameters like so:\nhttps://reqres.in GET /api/users?per_page=2\u0026amp;page=4 Or you can write the same request like this for better readability:\nhttps://reqres.in GET /api/users per_page=2 page=4 If your query parameters are more complex, you may be required to enable the Line-by-line Request Body option for the Vim plugin when your query does not work otherwise.\nComplex query: https://localhost:8001 GET /api/content/search limit=10 cql=(type=page and space=IT and label=infrastructure) Vim plugin option: :let b:vrc_split_request_body = 1 ","permalink":"https://www.andreaslongo.com/blog/rest-api-editor-plugins/","summary":"These two plugins might come in handy if you are a developer or consumer of web APIs (e.g. REST).\nThey allow you to send requests to your API and receive responses without leaving your editor. You can quickly explore APIs while saving your calls along the way as simple text file for documentation and sharing. They might supplement or replace tools like curl or Postman in your workflow.\nThis plugin is for Vim.","title":"Editor plugins for working with web APIs"},{"content":" How to use PKCS #12 archives with Apache Tomcat for Transport Layer Security (TLS). TLS superseded the Secure Sockets Layer (SSL) protocol.\nIn the following example, we create a Tomcat TLS connector and use a PKCS #12 file as keystore.\nDirectory layout ../Tomcat/ ../Tomcat/ | certificates/ | | file.p12 | conf/ | | server.xml The file file.p12 contains the private key and the file server.xml contains the password for the certificate. Make sure that only the Tomcat process can access them.\nThe password for the certificate’s private key must match that for the PKCS #12 file.\nTomcat version 8, 9 and 10 server.xml \u0026lt;!-- TOMCAT TLS CONNECTOR --\u0026gt; \u0026lt;Connector port=\u0026#34;8443\u0026#34; protocol=\u0026#34;org.apache.coyote.http11.Http11NioProtocol\u0026#34; SSLEnabled=\u0026#34;true\u0026#34; scheme=\u0026#34;https\u0026#34; secure=\u0026#34;true\u0026#34; \u0026gt; \u0026lt;SSLHostConfig\u0026gt; certificateVerification=\u0026#34;optional\u0026#34; \u0026lt;Certificate certificateKeystoreType=\u0026#34;PKCS12\u0026#34; certificateKeystoreFile=\u0026#34;certificates/\u0026lt;file\u0026gt;.p12\u0026#34; (1) certificateKeystorePassword=\u0026#34;\u0026lt;password\u0026gt;\u0026#34; (2) /\u0026gt; \u0026lt;/SSLHostConfig\u0026gt; \u0026lt;/Connector\u0026gt; Adapt certificateKeystoreFile and\ncertificateKeystorePassword to your environment\nTomcat version 7 We need a different config for Tomcat 7.\nserver.xml \u0026lt;!-- TOMCAT 7.x TLS CONNECTOR --\u0026gt; \u0026lt;Connector port=\u0026#34;8443\u0026#34; protocol=\u0026#34;org.apache.coyote.http11.Http11NioProtocol\u0026#34; SSLEnabled=\u0026#34;true\u0026#34; scheme=\u0026#34;https\u0026#34; secure=\u0026#34;true\u0026#34; clientAuth=\u0026#34;false\u0026#34; keystoreType=\u0026#34;PKCS12\u0026#34; keystoreFile=\u0026#34;certificates/\u0026lt;file\u0026gt;.p12\u0026#34; (1) keystorePass=\u0026#34;\u0026lt;password\u0026gt;\u0026#34; (2) /\u0026gt; Adapt keystoreFile and\nkeystorePass to your environment\nAfter restarting Tomcat, you can connect to TCP port 8443 via HTTP over TLS (HTTPS), for example.\n","permalink":"https://www.andreaslongo.com/blog/use-pkcs12-with-tomcat/","summary":"How to use PKCS #12 archives with Apache Tomcat for Transport Layer Security (TLS). TLS superseded the Secure Sockets Layer (SSL) protocol.\nIn the following example, we create a Tomcat TLS connector and use a PKCS #12 file as keystore.\nDirectory layout ../Tomcat/ ../Tomcat/ | certificates/ | | file.p12 | conf/ | | server.xml The file file.p12 contains the private key and the file server.xml contains the password for the certificate.","title":"Using PKCS #12 certigicate files with Tomcat for TLS"},{"content":" To download or upgrade a Vagrant box, you can use the command vagrant box add and vagrant box update.\nMost of the time, you should be fine using these automated processes. But sometimes you need more control. Imagine you are working from home and you need to download several huge boxes. You also have video calls with your customers throughout the day, so your priority is to maintain high call quality. To do that, you need to prevent Vagrant from eating up your entire internet bandwidth.\nControl your Vagrant download Vagrant has no built-in option for controlling the download process, but fortunately, you can use the tool of your choice to download a box.\nYou also want to integrate a box smoothly into your existing Vagrant environment so that commands like vagrant box update will work as intended.\nIn the following example, we will download and import the Debian Buster v10.7.0 box for Virtualbox.\nTo download a box Get the direct download link for a box.\nhttps://app.vagrantup.com/debian/boxes/contrib-buster64/versions/10.7.0/providers/virtualbox.box\nDownload the box.\nI am using curl here with a download rate limit, but you can use any tool that works for you.\n$ curl --location --remote-name --limit-rate 500k --continue-at - https://app.vagrantup.com/debian/boxes/contrib-buster64/versions/10.7.0/providers/virtualbox.box To import a box Add the box to Vagrant.\nNote the last argument, which is the local file you just downloaded.\n$ vagrant box add debian/contrib-buster64 ./virtualbox.box Rename the version directory of the box to the correct version.\n$ cd ~/.vagrant.d/boxes/debian-VAGRANTSLASH-buster64/ $ mv ./0 ./10.7.0 Your directory structure should now look like this:\ndebian-VAGRANTSLASH-contrib-buster64/ | 10.7.0/ | | virtualbox/ | | | Vagrantfile | | | box.ovf | | | box_update_check | | | contrib-buster.vmdk | | | master_id | | | metadata.json | metadata_url If not exist, create a metadata_url file.\nThis file should contain a link to the Vagrant box without the version part.\n$ echo -n \u0026#34;https://app.vagrantup.com/debian/boxes/contrib-buster64\u0026#34; \u0026gt; ./metadata_url Verify by listing all installed boxes.\n$ vagrant box list debian/contrib-buster64 (virtualbox, 10.7.0) You should see your new or updated box with the correct version number and, commands like vagrant box update should work as usual.\n","permalink":"https://www.andreaslongo.com/blog/import-vagrant-box/","summary":"To download or upgrade a Vagrant box, you can use the command vagrant box add and vagrant box update.\nMost of the time, you should be fine using these automated processes. But sometimes you need more control. Imagine you are working from home and you need to download several huge boxes. You also have video calls with your customers throughout the day, so your priority is to maintain high call quality.","title":"Vagrant: Importing a box manually"}]