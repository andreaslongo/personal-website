[{"content":"Whether you are a developer or a consumer of RESTful web services, these two plugins might come in handy.\n Send requests and receive responses to and from your REST APIs with your editor. You can quickly explore your REST API without switching context to other tools like curl or Postman.\n   This plugin is for Vim. It is a wrapper around curl.\n  This plugin is for Visual Studio Code. It is similar to the Vim plugin.\n   Clean and Easy Requests With both plugins, you write your API request as a text block in your editor and sent it to your API on demand.\n The response shows up in a new editor buffer/window.\n You can write multiple request blocks in the same file and send them separately.\n Save your file for later reference, or share it with other developers as an example with your code. It doesn’t get any simpler than this.\n One thing to note is that the syntax for the two plugins is slightly different. You can’t use a Vim request block directly with VS Code. However, it is straightforward to adjust the request block to make it work.\n Vim ./example.rest # vim: set filetype=rest # global curl options --silent --include -- # Type in a request block # Placed the cursor anywhere within the block # Hit the trigger key \u0026lt;C-j\u0026gt; (default) to send the request # A new vertically split buffer will be shown to display the output # A simple GET request https://reqres.in GET /api/users/2 # A POST request https://reqres.in POST /api/users { \u0026#34;name\u0026#34;: \u0026#34;morpheus\u0026#34;, \u0026#34;job\u0026#34;: \u0026#34;leader\u0026#34; } # And a DELETE request https://reqres.in DELETE /api/users/2     Bonus Tip You can add query parameters like so.\n https://reqres.in GET /api/users?per_page=2\u0026amp;page=4   For better readability, you can write this instead.\n https://reqres.in GET /api/users per_page=2 page=4   If your query parameters are more complex, you may have to enable Line-by-line Request Body in Vim :let b:vrc_split_request_body = 1.\n https://localhost:8001 GET /api/content/search limit=10 cql=(type=page and space=IT and label=infrastructure)     ","permalink":"https://www.andreaslongo.com/blog/rest-api-editor-plugins/","summary":"Whether you are a developer or a consumer of RESTful web services, these two plugins might come in handy.\n Send requests and receive responses to and from your REST APIs with your editor. You can quickly explore your REST API without switching context to other tools like curl or Postman.\n   This plugin is for Vim. It is a wrapper around curl.\n  This plugin is for Visual Studio Code.","title":"Two Editor Plugins Every REST API Developer Should Know"},{"content":"Today I learned how to use PKCS #12 archives with Apache Tomcat for Transport Layer Security (TLS). TLS superseded Secure Sockets Layer (SSL) protocol.\n In the following example, we create a Tomcat TLS connector that uses a PKCS #12 file as Keystore.\n Directory layout ../Tomcat/ ../Tomcat/ | certificates/ | | file.p12 | conf/ | | server.xml   The files file.p12 and server.xml contain the private key and password for a certificate. Make sure that only the Tomcat process can access them.\n The password for the certificate’s private key must match that for the PKCS #12 file.\n ../Tomcat/conf/server.xml for Tomcat version 10, 9, and 8 \u0026lt;!-- TOMCAT TLS CONNECTOR --\u0026gt; \u0026lt;Connector port=\u0026#34;8443\u0026#34; protocol=\u0026#34;org.apache.coyote.http11.Http11NioProtocol\u0026#34; SSLEnabled=\u0026#34;true\u0026#34; scheme=\u0026#34;https\u0026#34; secure=\u0026#34;true\u0026#34; \u0026gt; \u0026lt;SSLHostConfig\u0026gt; certificateVerification=\u0026#34;optional\u0026#34; \u0026lt;Certificate certificateKeystoreType=\u0026#34;PKCS12\u0026#34; certificateKeystoreFile=\u0026#34;certificates/\u0026lt;file\u0026gt;.p12\u0026#34; (1) certificateKeystorePassword=\u0026#34;\u0026lt;password\u0026gt;\u0026#34; (2) /\u0026gt; \u0026lt;/SSLHostConfig\u0026gt; \u0026lt;/Connector\u0026gt;     Adapt certificateKeystoreFile and\n  certificateKeystorePassword to your environment\n   For Tomcat 7, we need a different config.\n ../Tomcat/conf/server.xml for Tomcat version 7 \u0026lt;!-- TOMCAT 7.x TLS CONNECTOR --\u0026gt; \u0026lt;Connector port=\u0026#34;8443\u0026#34; protocol=\u0026#34;org.apache.coyote.http11.Http11NioProtocol\u0026#34; SSLEnabled=\u0026#34;true\u0026#34; scheme=\u0026#34;https\u0026#34; secure=\u0026#34;true\u0026#34; clientAuth=\u0026#34;false\u0026#34; keystoreType=\u0026#34;PKCS12\u0026#34; keystoreFile=\u0026#34;certificates/\u0026lt;file\u0026gt;.p12\u0026#34; (1) keystorePass=\u0026#34;\u0026lt;password\u0026gt;\u0026#34; (2) /\u0026gt;     Adapt keystoreFile and\n  keystorePass to your environment\n   After restarting Tomcat, you can connect to TCP port 8443 via HTTP over TLS (HTTPS), for example.\n ","permalink":"https://www.andreaslongo.com/blog/use-pkcs12-with-tomcat/","summary":"Today I learned how to use PKCS #12 archives with Apache Tomcat for Transport Layer Security (TLS). TLS superseded Secure Sockets Layer (SSL) protocol.\n In the following example, we create a Tomcat TLS connector that uses a PKCS #12 file as Keystore.\n Directory layout ../Tomcat/ ../Tomcat/ | certificates/ | | file.p12 | conf/ | | server.xml   The files file.p12 and server.xml contain the private key and password for a certificate.","title":"How to Use PKCS #12 Archives with Apache Tomcat for TLS/SSL"},{"content":"Today I learned how to download and import a Vagrant box manually.\n To download or upgrade a Vagrant box, you can use commands like vagrant box add and vagrant box update. Most of the time, you should be fine using these automated processes.\n But sometimes you need more control. Imagine you are working from home and you need to download several huge boxes. You also have lots of video calls with your customers throughout the day, so your priority is to maintain high call quality. To do that, you need to prevent Vagrant from eating up your entire internet bandwidth.\n A Better Way to Control your Vagrant Download Vagrant has no built-in option for controlling the download process, but fortunately, you can always use the tool of your choice to download a box.\n You also want to integrate a box smoothly into your existing Vagrant environment so that commands like vagrant box update will work as intended.\n In the following example, we will download and import the Debian Buster v10.7.0 box for Virtualbox.\n Steps\n  Get the direct download link for a box\n  https://app.vagrantup.com/debian/boxes/contrib-buster64/versions/10.7.0/providers/virtualbox.box\n     Download the box\nI am using curl here with a download rate limit, but you can use any tool that works for you.\n $ curl --location --remote-name --limit-rate 500k --continue-at - https://app.vagrantup.com/debian/boxes/contrib-buster64/versions/10.7.0/providers/virtualbox.box       Add the box to Vagrant\nNote the last argument, which is the local file you just downloaded.\n $ vagrant box add debian/contrib-buster64 ./virtualbox.box       Rename the version directory of the box to the correct version\n$ cd ~/.vagrant.d/boxes/debian-VAGRANTSLASH-buster64/ $ mv ./0 ./10.7.0   Your directory structure should now look like this:\n debian-VAGRANTSLASH-contrib-buster64/ | 10.7.0/ | | virtualbox/ | | | Vagrantfile | | | box.ovf | | | box_update_check | | | contrib-buster.vmdk | | | master_id | | | metadata.json | metadata_url       If not exist, create a metadata_url file\nThis file should contain a link to the Vagrant box without the version part.\n $ echo -n \u0026#34;https://app.vagrantup.com/debian/boxes/contrib-buster64\u0026#34; \u0026gt; ./metadata_url       Verify by listing all installed boxes\n$ vagrant box list debian/contrib-buster64 (virtualbox, 10.7.0)      You should see your new or updated box with the correct version number and, commands like vagrant box update should work as usual.\n   ","permalink":"https://www.andreaslongo.com/blog/import-a-vagrant-box-manually/","summary":"Today I learned how to download and import a Vagrant box manually.\n To download or upgrade a Vagrant box, you can use commands like vagrant box add and vagrant box update. Most of the time, you should be fine using these automated processes.\n But sometimes you need more control. Imagine you are working from home and you need to download several huge boxes. You also have lots of video calls with your customers throughout the day, so your priority is to maintain high call quality.","title":"How to Download and Import a Vagrant Box Manually"}]