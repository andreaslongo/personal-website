<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Windows on Andreas Longo</title>
    <link>https://www.andreaslongo.com/tags/windows/</link>
    <description>Recent content in Windows on Andreas Longo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.andreaslongo.com/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerShell: Fixing terminal input issues</title>
      <link>https://www.andreaslongo.com/blog/powershell-readline-issue-windows/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/powershell-readline-issue-windows/</guid>
      <description> When you start PowerShell and you are not able to enter any commands (copy/paste might still work), chances are your PSReadLine module is outdated.
Fix: Update PSReadLine module Get-Module PSReadLine Version 2.0.0 # Open cmd.exe as admin and run: powershell -noprofile -command &amp;#34;Install-Module PSReadLine -Force&amp;#34; Get-Module PSReadLine Version 2.2.6 </description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>When you start PowerShell and you are not able to enter any commands (copy/paste might still work), chances are your <a href="https://github.com/PowerShell/PSReadLine">PSReadLine</a> module is outdated.</p>
</div>
<div class="listingblock">
<div class="title">Fix: Update PSReadLine module</div>
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">Get-Module PSReadLine
Version 2.0.0

# Open cmd.exe as admin and run:
powershell -noprofile -command &#34;Install-Module PSReadLine -Force&#34;

Get-Module PSReadLine
Version 2.2.6</code></pre>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Windows: Testing network connections</title>
      <link>https://www.andreaslongo.com/blog/windows-testing-network-connections/</link>
      <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/windows-testing-network-connections/</guid>
      <description>Verifying that one system can connect to another system via network is a common task for managing applications. A business application that is not interconnected to some other entity is hard to find.
This is a quick way to test some basic network connections on Windows without much dependencies. All you need is PowerShell and .NET which should already be included on most Windows hosts.
You create a custom TcpListener (which is an instance of a .</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>Verifying that one system can connect to another system via network is a common task for managing applications.
A business application that is not interconnected to some other entity is hard to find.</p>
</div>
<div class="paragraph">
<p>This is a quick way to test some basic network connections on Windows without much dependencies.
All you need is <em>PowerShell</em> and <em>.NET</em> which should already be included on most Windows hosts.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You create a custom <code>TcpListener</code> (which is an instance of a .NET class) to open up a port for TCP/IP connections.</p>
</li>
<li>
<p>Then, you connect to this port from a remote system to verify the connection at a basic level.</p>
</li>
<li>
<p>Reference: <a href="https://learn.microsoft.com/en-us/dotnet/api/system.net.sockets.tcplistener" class="bare">https://learn.microsoft.com/en-us/dotnet/api/system.net.sockets.tcplistener</a></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Create and start a custom listener (e.g. the server):</div>
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">PS server&gt; $listener = [System.Net.Sockets.TcpListener]2383
PS server&gt; $listener.Start()

# Verify that ports are opened
PS server&gt; Get-NetTCPConnection -State Listen -LocalPort 2383

LocalAddress                        LocalPort RemoteAddress                       RemotePort State       AppliedSetting OwningProcess
------------                        --------- -------------                       ---------- -----       -------------- -------------
0.0.0.0                             2383      0.0.0.0                             0          Listen                     840</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Test the connection from a remote system (e.g. the client):</div>
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">PS client&gt; Test-NetConnection &lt;server&gt; -Port 2383

ComputerName     : server
RemoteAddress    : 10.0.0.2
RemotePort       : 2383
InterfaceAlias   : 10.0.0.100
SourceAddress    : 10.0.0.100
TcpTestSucceeded : True</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Stop the listener when you are done:</div>
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">PS server&gt; $listener.Stop()

# Verify that ports are closed
PS server&gt; Get-NetTCPConnection -State Listen -LocalPort 2383
Get-NetTCPConnection : No matching MSFT_NetTCPConnection objects found by CIM query for instances of the ROOT/StandardCimv2/MSFT_NetTCPConnection class on
the  CIM server: SELECT * FROM MSFT_NetTCPConnection  WHERE ((LocalPort = 2383)) AND ((State = 2)). Verify query parameters and retry.
    + CategoryInfo          : ObjectNotFound: (MSFT_NetTCPConnection:String) [Get-NetTCPConnection], CimJobException
    + FullyQualifiedErrorId : CmdletizationQuery_NotFound,Get-NetTCPConnection</code></pre>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Windows: Publishing a remote terminal app</title>
      <link>https://www.andreaslongo.com/blog/windows-publish-rdp-app/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/windows-publish-rdp-app/</guid>
      <description>When working with centrally hosted applications on Windows, I often provide such programs as RemoteApp for a good user experience.
A remote app runs remotely on a terminal server, but the look and feel for a user is more like a locally installed app on a client computer - e.g. the app has its own resizable window and its own taskbar entry.
Publishing a remote app For publishing remote apps, I use a variation of the following command.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>When working with centrally hosted applications on Windows, I often provide such programs as <a href="https://en.wikipedia.org/wiki/Remote_Desktop_Services#RemoteApp">RemoteApp</a> for a good user experience.</p>
</div>
<div class="paragraph">
<p>A remote app runs remotely on a terminal server, but the look and feel for a user is more like a locally installed app on a client computer - e.g. the app has its own resizable window and its own taskbar entry.</p>
</div>
<div class="sect1">
<h2 id="_publishing_a_remote_app">Publishing a remote app</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For publishing remote apps, I use a variation of the following command.
This is not only faster than working with the <em>Server Manager</em> GUI, but you also have more control over the resulting app with additional options that are not available via GUI.</p>
</div>
<div class="listingblock">
<div class="title">Run <em>PowerShell</em> as admin:</div>
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell"># Change the arguments below.
$arguments = @{
    Alias = &#39;remote-app-01&#39;
    CollectionName = &#39;remote-apps&#39;
    CommandLineSetting = &#39;DoNotAllow&#39;
    DisplayName = &#39;Remote App 1&#39;
    FilePath = &#39;D:\bin\app.exe&#39;
    FolderName = &#39;Business applications&#39;
    ShowInWebAccess = $true
}

New-RDRemoteApp @arguments</code></pre>
</div>
</div>
<div class="paragraph">
<p>Reference: <a href="https://learn.microsoft.com/en-us/powershell/module/remotedesktop/new-rdremoteapp">New-RDRemoteApp</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_downloading_a_remote_app">Downloading a remote app</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you need a <code>.rdp</code> file to distribute the app:</p>
</div>
<div class="paragraph">
<p>On the RDS host</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Open the <em>Internet Information Services (IIS) Manager</em>.</p>
</li>
<li>
<p>Navigate to <em>Sites &gt; Default Web Site &gt; RDWeb</em>.</p>
</li>
<li>
<p>In the <em>Actions</em> menu on the right side, click on <em>Browse Application</em>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>This should open the RDS web page with the <em>Edge</em> browser.
Note that you cannot download RDP apps with <em>Internet Explorer</em>.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If you get a certificate warning, accept it and continue.</p>
</li>
<li>
<p>Login with your account.</p>
<div class="paragraph">
<p>Note that your account needs access to the <em>Collection</em>, otherwise the web page will be blank.</p>
</div>
</li>
<li>
<p>Find the RDP app and click on it.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>This should start the download.</p>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Unix-like `watch` and `tail` commands for PowerShell</title>
      <link>https://www.andreaslongo.com/blog/powershell-watch/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/powershell-watch/</guid>
      <description>There is no equivalent to the Unix watch command on Windows, but you can get close enough behavior.
Watching commands with PowerShell # Similar to `watch &amp;lt;command&amp;gt;` PS&amp;gt; while ($true) {&amp;lt;your command&amp;gt;; sleep -Seconds 2} PS&amp;gt; while ($true) {(Get-Service -Name &amp;#39;Remote Desktop Services&amp;#39;).Status; sleep -Seconds 2} Running Running You can also follow log file output similar to the Unix tail command.
Tailing logs with PowerShell: # Similar to `tail --follow &amp;lt;filename&amp;gt;` PS&amp;gt; Get-Content -Path &amp;lt;logfile&amp;gt; -Tail 10 –Wait PS&amp;gt; Get-Content -Path &amp;#39;C:\app.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>There is no equivalent to the Unix <a href="https://en.wikipedia.org/wiki/Watch_(command)"><code>watch</code></a> command on Windows, but you can get close enough behavior.</p>
</div>
<div class="listingblock">
<div class="title">Watching commands with PowerShell</div>
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># Similar to `watch &lt;command&gt;`
PS&gt; while ($true) {&lt;your command&gt;; sleep -Seconds 2}

PS&gt; while ($true) {(Get-Service -Name &#39;Remote Desktop Services&#39;).Status; sleep -Seconds 2}
Running
Running</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can also follow log file output similar to the Unix <a href="https://en.wikipedia.org/wiki/Tail_(Unix)"><code>tail</code></a> command.</p>
</div>
<div class="listingblock">
<div class="title">Tailing logs with PowerShell:</div>
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># Similar to `tail --follow &lt;filename&gt;`
PS&gt; Get-Content -Path &lt;logfile&gt; -Tail 10 –Wait

PS&gt; Get-Content -Path &#39;C:\app.log&#39; -Tail 10 –Wait</code></pre>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>MSSQL: Configure an alias for SQL connections</title>
      <link>https://www.andreaslongo.com/blog/mssql-connection-alias/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/mssql-connection-alias/</guid>
      <description>You can use the SQL Server Configuration Manager to configure an alias for connections to a MSSQL instance.
But on some versions of Windows, the configuration manager is not available as a regular application. You might find it as a snap-in for the Microsoft Management Console (MMC).
If the configuration manager is generally not available on your system, you can instead use this tools to set an alias:
# 64 bit version C:\Windows\System32\cliconfg.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>You can use the <em>SQL Server Configuration Manager</em> to configure an alias for connections to a MSSQL instance.</p>
</div>
<div class="paragraph">
<p>But on some versions of Windows, the configuration manager is not available as a regular application.
You might find it as a snap-in for the <em>Microsoft Management Console (MMC)</em>.</p>
</div>
<div class="paragraph">
<p>If the configuration manager is generally not available on your system, you can instead use this tools to set an alias:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># 64 bit version
C:\Windows\System32\cliconfg.exe

# 32 bit version
C:\Windows\SysWOW64\cliconfg.exe</code></pre>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Cygwin: A `sudo` like command</title>
      <link>https://www.andreaslongo.com/blog/cygwin-sudo-command/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/cygwin-sudo-command/</guid>
      <description>You can run commands from Cygwin with elevated permissions.
On Windows, you have something like Run as different user or Run as administrator. And on Linux, you probably use the sudo command for this.
To get similar functionality on Cygwin, you can add a new alias to your shell’s config file. The following is for Zsh, but it should also work for other bash-like shells.
~/.zshrc alias sudo=&amp;#39;cygstart --action=runas&amp;#39; Now you can run something like this to test the alias.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>You can run commands from <a href="https://cygwin.com">Cygwin</a> with elevated permissions.</p>
</div>
<div class="paragraph">
<p>On Windows, you have something like <code>Run as different user</code> or <code>Run as administrator</code>.
And on Linux, you probably use the <a href="https://www.sudo.ws"><code>sudo</code></a> command for this.</p>
</div>
<div class="paragraph">
<p>To get similar functionality on Cygwin, you can add a new alias to your shell’s config file.
The following is for <a href="https://www.zsh.org">Zsh</a>, but it should also work for other bash-like shells.</p>
</div>
<div class="listingblock">
<div class="title"><code>~/.zshrc</code></div>
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">alias sudo=&#39;cygstart --action=runas&#39;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now you can run something like this to test the alias.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ sudo touch sudo-test</code></pre>
</div>
</div>
<div class="paragraph">
<p>Windows will ask for your username and password.
Then it will run the command in the context of the given user.</p>
</div>
<div class="paragraph">
<p>That works, but the user experience is not great.</p>
</div>
<div class="paragraph">
<p>Your command gets executed in a new Cygwin process which automatically exits when the command returns.
Also, the user prompt is GUI based which interrupts your CLI workflow.</p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Cygwin: Change the default home directory</title>
      <link>https://www.andreaslongo.com/blog/cygwin-change-default-home-dir/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/cygwin-change-default-home-dir/</guid>
      <description>You can define the default home directory for all Cygwin users in the nsswitch.conf file.
For example, the following sets your default home directory to /cygdrive/c/Users/{user_name}/home, or in Windows notation to C:\Users\{user_name}\home.
/etc/nsswitch.conf db_home: /%H/home You can change it to whatever you like.
See the Cygwin documentation for more information. Look here below the /path section for more on supported wildcard characters.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>You can define the default home directory for all <a href="https://cygwin.com">Cygwin</a> users in the <code>nsswitch.conf</code> file.</p>
</div>
<div class="paragraph">
<p>For example, the following sets your default home directory to <code>/cygdrive/c/Users/{user_name}/home</code>, or in Windows notation to <code>C:\Users\{user_name}\home</code>.</p>
</div>
<div class="listingblock">
<div class="title"><code>/etc/nsswitch.conf</code></div>
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">db_home: /%H/home</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can change it to whatever you like.</p>
</div>
<div class="paragraph">
<p>See the <a href="https://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-mapping-nsswitch-home">Cygwin documentation</a> for more information.
Look <a href="https://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-mapping-nsswitch-passwd">here</a> below the <code>/path</code> section for more on supported wildcard characters.</p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Cygwin: Using the clipboard with Vim</title>
      <link>https://www.andreaslongo.com/blog/cygwin-vim-clipboard/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/cygwin-vim-clipboard/</guid>
      <description>To use the Windows clipboard in Vim on Cygwin, add the following to your Vim config file.
.vimrc set clipboard=unnamed Vim will now use the clipboard register * for yank, delete, change and put operations. The * register gets synced with the Windows clipboard automatically.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>To use the Windows clipboard in <a href="https://www.vim.org/">Vim</a> on <a href="https://cygwin.com">Cygwin</a>, add the following to your Vim config file.</p>
</div>
<div class="listingblock">
<div class="title"><code>.vimrc</code></div>
<div class="content">
<pre class="highlight"><code class="language-vim" data-lang="vim">set clipboard=unnamed</code></pre>
</div>
</div>
<div class="paragraph">
<p>Vim will now use the clipboard register <code>*</code> for yank, delete, change and put operations.
The <code>*</code> register gets synced with the Windows clipboard automatically.</p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Active Directory: Managed service accounts</title>
      <link>https://www.andreaslongo.com/blog/windows-ad-managed-service-accounts/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/windows-ad-managed-service-accounts/</guid>
      <description>Traditionally, system administrators use Active Directory (AD) basic user accounts with limited permissions to run a service (Service Account).
Managed Service Accounts (MSA) are special accounts to eliminate the need for administrators to manually manage the credentials, passwords, and SPNs of traditional service accounts. Also, with MSAs these tasks no longer disrupt a service (no downtime).
Pro Administration Automatic password changes. No manual password management.
Availability No service downtime for password changes.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>Traditionally, system administrators use Active Directory (AD) basic user accounts with limited permissions to run a service (Service Account).</p>
</div>
<div class="paragraph">
<p><strong>Managed Service Accounts (MSA)</strong> are special accounts to eliminate the need for administrators to manually manage the credentials, passwords, and SPNs of traditional service accounts.
Also, with MSAs these tasks no longer disrupt a service (no downtime).</p>
</div>
<div class="dlist">
<div class="title">Pro</div>
<dl>
<dt class="hdlist1">Administration</dt>
<dd>
<p>Automatic password changes. No manual password management.</p>
</dd>
<dt class="hdlist1">Availability</dt>
<dd>
<p>No service downtime for password changes.</p>
</dd>
<dt class="hdlist1">Security</dt>
<dd>
<p>Frequent password changes. User login to systems via MSA is not possible.</p>
</dd>
</dl>
</div>
<div class="dlist">
<div class="title">Con</div>
<dl>
<dt class="hdlist1">Initial Setup</dt>
<dd>
<p>Initial setup and troubleshooting is more complex for MSAs than with basic user accounts.</p>
</dd>
</dl>
</div>
<div class="sect1">
<h2 id="_types_of_managed_service_accounts">Types of managed service accounts</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There are three types of managed service accounts.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Virtual Account</dt>
<dd>
<p>Local system account <strong>for local services</strong>. Access to network resources is only possible via computer identity.</p>
</dd>
<dt class="hdlist1">Managed Service Account (MSA)</dt>
<dd>
<p>Active Directory account <strong>for generic services</strong>.</p>
</dd>
<dt class="hdlist1">Group Managed Service Account (gMSA)</dt>
<dd>
<p>Active Directory account <strong>for cluster services</strong>.</p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_requirements">Requirements</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Use the PowerShell to work with managed service accounts.
Install and import the following module on the system on which you want to use MSAs.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ Install-WindowsFeature RSAT-AD-PowerShell
$ Import-Module ActiveDirectory</code></pre>
</div>
</div>
<div class="paragraph">
<p>Docs: <a href="https://docs.microsoft.com/en-US/troubleshoot/windows-server/system-management-components/remote-server-administration-tools">Remote Server Administration Tools (RSAT) for Windows</a>, <a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration">ActiveDirectory</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_create_a_managed_service_account_in_active_directory">Create a managed service account in Active Directory</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ New-ADServiceAccount &lt;account name&gt; -RestrictToSingleComputer</code></pre>
</div>
</div>
<div class="paragraph">
<p>Docs: <a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration/new-adserviceaccount">New-ADServiceAccount</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_install_a_managed_service_account_on_a_system">Install a managed service account on a system</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before you can use an MSA, you have to install it on the target system.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ Install-ADServiceAccount &lt;account name&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can test the MSA from the system.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ Test-ADServiceAccount &lt;account name&gt;

True</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, use the Services console <code>Services.msc</code> to configure a service to use the MSA.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Leave the password blank.</p>
</li>
<li>
<p>Ensure that the account name ends with a dollar sign <code>$</code>.</p>
</li>
<li>
<p>Start or restart the service.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Docs: <a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration/install-adserviceaccount">Install-ADServiceAccount</a>, <a href="https://docs.microsoft.com/en-us/powershell/module/activedirectory/test-adserviceaccount">Test-ADServiceAccount</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_remove_a_managed_service_account">Remove a managed service account</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You should remove an MSA from the system if it is no longer needed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ Uninstall-ADServiceAccount &lt;account name&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Docs: <a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration/uninstall-adserviceaccount">Uninstall-ADServiceAccount</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reset_the_password_for_a_managed_service_account">Reset the password for a managed service account</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Active Directory manages MSA passwords automatically.
You don’t have to do anything.
Should you still have to reset the password manually, you can do so.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ Reset-ADServiceAccountPassword &lt;account name&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Docs: <a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration/reset-adserviceaccountpassword">Reset-ADServiceAccountPassword</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_troubleshooting">Troubleshooting</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_a_service_does_not_start_with_a_managed_service_account">A service does not start with a managed service account</h3>
<div class="listingblock">
<div class="title">Confirm that the MSA exists and is enabled in Active Directory.</div>
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ Get-ADServiceAccount &lt;account name&gt;

DistinguishedName : CN=msa-sql01,CN=Managed Service Accounts,DC=example,DC=com
Enabled           : True
Name              : msa-sql01
ObjectClass       : msDS-ManagedServiceAccount
ObjectGUID        : 12345a13-12e3-1c23-b456-a123e123fd78
SamAccountName    : msa-sql01$
SID               : S-1-5-21-1234567890-1234567890-098765432-184195
UserPrincipalName :</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Confirm that the account is installed on the system</div>
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ Install-ADServiceAccount &lt;account name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Confirm that the account has the <code>SeServiceLogonRight</code> permission</div>
<div class="content">
<pre class="highlight"><code class="language-powershell" data-lang="powershell">$ NTRights +r SeServiceLogonRight –u &lt;account name&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Docs: <a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-adserviceaccount">Get-ADServiceAccount</a>, <a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration/install-adserviceaccount">Install-ADServiceAccount</a>, <a href="https://ss64.com/nt/ntrights.html">NTRIGHTS.exe (Windows Server 2003 Resource Kit Tools)</a></p>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Getting the uptime from Windows</title>
      <link>https://www.andreaslongo.com/blog/windows-get-uptime/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/windows-get-uptime/</guid>
      <description>I was looking for a uptime like command for Windows.
The uptime command on Linux: $ uptime 12:53:36 up 5:03, 1 user, load average: 0.83, 0.61, 0.36 $ uptime --pretty up 5 hours, 3 minutes $ uptime --since 2021-02-17 07:50:35 On Windows, there is the cmdlet Get-Uptime which is available for PowerShell version 6+.
$ Get-Uptime -Since Monday, January 18, 2021 7:56:57 AM If Get-Uptime is not available, you can query the WMI with a CIM cmdlet.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>I was looking for a <code>uptime</code> like command for Windows.</p>
</div>
<div class="listingblock">
<div class="title">The <code>uptime</code> command on Linux:</div>
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ uptime
12:53:36 up  5:03,  1 user,  load average: 0.83, 0.61, 0.36

$ uptime --pretty
up 5 hours, 3 minutes

$ uptime --since
2021-02-17 07:50:35</code></pre>
</div>
</div>
<div class="paragraph">
<p>On Windows, there is the cmdlet <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-uptime"><code>Get-Uptime</code></a> which is available for <a href="https://docs.microsoft.com/en-us/powershell/">PowerShell</a> version 6+.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ Get-Uptime -Since
Monday, January 18, 2021 7:56:57 AM</code></pre>
</div>
</div>
<div class="paragraph">
<p>If <code>Get-Uptime</code> is not available, you can query the WMI with a CIM cmdlet.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object LastBootUpTime

LastBootUpTime
--------------
18.01.2021 07:56:41</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>LastBootUpTime</code> value may not be updated if you have <em>fast boot/startup</em> enabled for your system.</p>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
