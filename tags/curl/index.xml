<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>curl on Andreas Longo</title>
    <link>https://www.andreaslongo.com/tags/curl/</link>
    <description>Recent content in curl on Andreas Longo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.andreaslongo.com/tags/curl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Text editor plugins for REST APIs</title>
      <link>https://www.andreaslongo.com/blog/things-i-learned/web/rest-api-editor-plugins/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/things-i-learned/web/rest-api-editor-plugins/</guid>
      <description>Whether you are a developer or a consumer of RESTful web services, these two plugins might come in handy.
 Send requests and receive responses to and from your REST APIs with your editor. You can quickly explore your REST API without switching context to other tools like curl or Postman.
   This plugin is for Vim. It is a wrapper around curl.
  This plugin is for Visual Studio Code.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>Whether you are a developer or a consumer of RESTful web services, these two plugins might come in handy.</p>
</div>
<div class="paragraph">
<p>Send requests and receive responses to and from your REST APIs with your editor.
You can quickly explore your REST API without switching context to other tools like <a href="https://curl.se/">curl</a> or <a href="https://www.postman.com/">Postman</a>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/diepm/vim-rest-console">This plugin</a> is for <a href="https://www.vim.org/">Vim</a>.
It is a wrapper around <code>curl</code>.</p>
</li>
<li>
<p><a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">This plugin</a> is for <a href="https://code.visualstudio.com/">Visual Studio Code</a>. It is similar to the Vim plugin.</p>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_clean_and_easy_requests">Clean and Easy Requests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With both plugins, you write your API request as a text block in your editor and sent it to your API on demand.</p>
</div>
<div class="paragraph">
<p>The response shows up in a new editor buffer/window.</p>
</div>
<div class="paragraph">
<p>You can write multiple request blocks in the same file and send them separately.</p>
</div>
<div class="paragraph">
<p>Save your file for later reference, or share it with other developers as an example with your code.
It doesn’t get any simpler than this.</p>
</div>
<div class="paragraph">
<p>One thing to note is that the syntax for the two plugins is slightly different.
You can’t use a Vim request block directly with VS Code.
However, it is straightforward to adjust the request block to make it work.</p>
</div>
<div class="listingblock">
<div class="title">Vim <code>./example.rest</code></div>
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console"># vim: set filetype=rest

# global curl options
--silent
--include
--

# Type in a request block
# Placed the cursor anywhere within the block
# Hit the trigger key &lt;C-j&gt; (default) to send the request
# A new vertically split buffer will be shown to display the output

# A simple GET request

https://reqres.in
GET /api/users/2

# A POST request

https://reqres.in
POST /api/users
{
    &#34;name&#34;: &#34;morpheus&#34;,
    &#34;job&#34;: &#34;leader&#34;
}

# And a DELETE request

https://reqres.in
DELETE /api/users/2</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_bonus_tip">Bonus Tip</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can add query parameters like so.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">https://reqres.in
GET /api/users?per_page=2&amp;page=4</code></pre>
</div>
</div>
<div class="paragraph">
<p>For better readability, you can write this instead.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">https://reqres.in
GET /api/users
per_page=2
page=4</code></pre>
</div>
</div>
<div class="paragraph">
<p>If your query parameters are more complex, you may have to enable <a href="https://github.com/diepm/vim-rest-console#54-line-by-line-request-body">Line-by-line Request Body</a> in Vim <code>:let b:vrc_split_request_body = 1</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">https://localhost:8001
GET /api/content/search
limit=10
cql=(type=page and space=IT and label=infrastructure)</code></pre>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Download and import a Vagrant box manually</title>
      <link>https://www.andreaslongo.com/blog/things-i-learned/vagrant/import-vagrant-box/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/things-i-learned/vagrant/import-vagrant-box/</guid>
      <description>How to download and import a Vagrant box manually.
 To download or upgrade a Vagrant box, you can use commands like vagrant box add and vagrant box update. Most of the time, you should be fine using these automated processes.
 But sometimes you need more control. Imagine you are working from home and you need to download several huge boxes. You also have lots of video calls with your customers throughout the day, so your priority is to maintain high call quality.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>How to download and import a <a href="https://www.vagrantup.com/">Vagrant</a> box manually.</p>
</div>
<div class="paragraph">
<p><strong>To download or upgrade a Vagrant box</strong>, you can use commands like <code>vagrant box add</code> and <code>vagrant box update</code>.
Most of the time, you should be fine using these automated processes.</p>
</div>
<div class="paragraph">
<p><strong>But sometimes you need more control.</strong>
Imagine you are working from home and you need to download several huge boxes.
You also have lots of video calls with your customers throughout the day, so your priority is to maintain high call quality. To do that, you need to prevent Vagrant from eating up your entire internet bandwidth.</p>
</div>
<div class="sect1">
<h2 id="_a_better_way_to_control_your_vagrant_download">A Better Way to Control your Vagrant Download</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vagrant has no built-in option for controlling the download process, but fortunately, you can always use the tool of your choice to download a box.</p>
</div>
<div class="paragraph">
<p><strong>You also want to integrate a box smoothly into your existing Vagrant environment</strong> so that commands like <code>vagrant box update</code> will work as intended.</p>
</div>
<div class="paragraph">
<p>In the following example, we will download and import the <a href="https://app.vagrantup.com/debian/boxes/contrib-buster64">Debian Buster v10.7.0</a> box for <a href="https://www.virtualbox.org">Virtualbox</a>.</p>
</div>
<div class="paragraph">
<p><strong>Steps</strong></p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Get the direct download link for a box</p>
<div class="ulist">
<ul>
<li>
<p><a href="https://app.vagrantup.com/debian/boxes/contrib-buster64/versions/10.7.0/providers/virtualbox.box" class="bare">https://app.vagrantup.com/debian/boxes/contrib-buster64/versions/10.7.0/providers/virtualbox.box</a></p>
</li>
</ul>
</div>
</li>
<li>
<p>Download the box</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>I am using <code>curl</code> here with a download rate limit, but you can use any tool that works for you.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ curl --location --remote-name --limit-rate 500k --continue-at - https://app.vagrantup.com/debian/boxes/contrib-buster64/versions/10.7.0/providers/virtualbox.box</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Add the box to Vagrant</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>Note the last argument, which is the local file you just downloaded.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ vagrant box add debian/contrib-buster64 ./virtualbox.box</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Rename the version directory of the box to the correct version</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ cd ~/.vagrant.d/boxes/debian-VAGRANTSLASH-buster64/
$ mv ./0 ./10.7.0</code></pre>
</div>
</div>
<div class="paragraph">
<p>Your directory structure should now look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">debian-VAGRANTSLASH-contrib-buster64/
| 10.7.0/
| | virtualbox/
| | | Vagrantfile
| | | box.ovf
| | | box_update_check
| | | contrib-buster.vmdk
| | | master_id
| | | metadata.json
| metadata_url</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>If not exist, create a <code>metadata_url</code> file</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This file should contain a link to the Vagrant box <strong>without the version part</strong>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ echo -n &#34;https://app.vagrantup.com/debian/boxes/contrib-buster64&#34; &gt; ./metadata_url</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Verify by listing all installed boxes</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-console" data-lang="console">$ vagrant box list
debian/contrib-buster64  (virtualbox, 10.7.0)</code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>You should see your new or updated box with the <strong>correct version number</strong> and,
commands like <code>vagrant box update</code> should work as usual.</p>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
