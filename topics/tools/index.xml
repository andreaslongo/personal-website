<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tools on Andreas Longo</title>
    <link>https://www.andreaslongo.com/topics/tools/</link>
    <description>Recent content in Tools on Andreas Longo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.andreaslongo.com/topics/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Repairing video files with FFmpeg</title>
      <link>https://www.andreaslongo.com/blog/repairing-videos-ffmpeg/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/repairing-videos-ffmpeg/</guid>
      <description>I often record a short screencast to document some process rather than taking a long series of screenshots. To me this is more effective to produce and most of the time also more convenient to consume later on. When I need some screenshots for written or printed documentation, I take them from the screencast after the fact.
For recording, I use the GNOME builtin recorder. It is instantaneously ready to use and requires no fiddling with settings or file paths.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>I often record a short <a href="https://en.wikipedia.org/wiki/Screencast">screencast</a> to document some process rather than taking a long series of screenshots.
To me this is more effective to produce and most of the time also more convenient to consume later on.
When I need some screenshots for written or printed documentation, I take them from the screencast after the fact.</p>
</div>
<div class="paragraph">
<p>For recording, I use the <a href="https://help.gnome.org/users/gnome-help/stable/screen-shot-record.html.en">GNOME builtin recorder</a>.
It is instantaneously ready to use and requires no fiddling with settings or file paths.
It creates <a href="https://en.wikipedia.org/wiki/WebM">WebM</a> videos without audio.</p>
</div>
<div class="paragraph">
<p>Sometimes the recorder crashes.
I then only see the first recorded frame when viewing the resulting video and I also cannot skip to a later position in the video.
The file size and the playback timeline however indicate that there must be more video data in the file.</p>
</div>
<div class="paragraph">
<p>To be fair, crashes are quite rare and only happened to me when my PC went to sleep or locked the screen during an active recording - it was my fault.</p>
</div>
<div class="sect1">
<h2 id="_fixing_videos">Fixing videos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I use <a href="https://en.wikipedia.org/wiki/FFmpeg">FFmpeg</a> in <a href="https://ffmpeg.org/ffmpeg.html#toc-Stream-copy">stream copy mode</a> for this which is very fast:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">ffmpeg -i ./bad_video.webm -codec copy ./fixed_video.webm</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can also run this in a <a href="https://github.com/linuxserver/docker-ffmpeg">container</a>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">podman/docker container run \
    --interactive \
    --pull=newer \
    --rm \
    --tty \
    --volume &#34;${PWD}&#34;:/config:Z,rw \
    --workdir /config \
        linuxserver/ffmpeg:latest \
            -i ./bad_video.webm \
            -codec copy \
            ./fixed_video.webm</code></pre>
</div>
</div>
<div class="paragraph">
<p>The same as above, but wrapped in a shell script for easy usage:</p>
</div>
<div class="listingblock">
<div class="title">ffmpeg.sh</div>
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">#!/usr/bin/env bash

podman container run \
    --interactive \
    --pull=newer \
    --rm \
    --tty \
    --volume &#34;${PWD}&#34;:/config:Z,rw \
    --workdir /config \
        docker.io/linuxserver/ffmpeg:latest \
            &#34;${@}&#34;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Use it like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">ffmpeg.sh -i ./bad_video.webm -codec copy ./fixed_video.webm</code></pre>
</div>
</div>
<div class="paragraph">
<p>Let me know if you have more tips and tricks for fixing videos or if you have other use cases for FFmpeg.</p>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git: Signing an already pushed commit</title>
      <link>https://www.andreaslongo.com/blog/gpg-sign-pushed-commit/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/gpg-sign-pushed-commit/</guid>
      <description>Given you have created a pull request (PR) with a single commit on GitHub. The commit is not GPG-signed. The maintainer asks you to sign the commit.
If you are the only one working (committing) to this PR, you can force-push a signed commit.
# Sign the latest commit on your local repository git commit --amend --no-edit --gpg-sign # Force push the commit to your remote repository (fork) git push --force-with-lease GitHub will automatically update your PR.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>Given you have created a pull request (PR) with a single commit on GitHub.
The commit is not GPG-signed.
The maintainer asks you to sign the commit.</p>
</div>
<div class="paragraph">
<p>If you are the only one working (committing) to this PR, you can force-push a signed commit.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh"># Sign the latest commit on your local repository
git commit --amend --no-edit --gpg-sign

# Force push the commit to your remote repository (fork)
git push --force-with-lease</code></pre>
</div>
</div>
<div class="paragraph">
<p>GitHub will automatically update your PR.</p>
</div>
<div class="imageblock thumb">
<div class="content">
<img src="gpg-sign-pushed-commit.png" alt="gpg sign pushed commit"/>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>SSH: Using wildcards with `scp` to copy remote files</title>
      <link>https://www.andreaslongo.com/blog/scp-wildcards/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/scp-wildcards/</guid>
      <description>Use quotes for the remote side of your command.
Copying multiple files from remote to local: $ scp &amp;#39;remote-host:path/source-file*&amp;#39; ./local-target source-file1.png 100% 10KB 180.1KB/s 00:00 source-file2.png 100% 17KB 282.7KB/s 00:00 source-file3.png 100% 12KB 274.4KB/s 00:00 With quotes, wildcards are expanded by the remote shell instead of your local shell which cannot see the remote files.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>Use quotes for the remote side of your command.</p>
</div>
<div class="listingblock">
<div class="title">Copying multiple files from remote to local:</div>
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ scp &#39;remote-host:path/source-file*&#39; ./local-target
source-file1.png  100%   10KB 180.1KB/s   00:00
source-file2.png  100%   17KB 282.7KB/s   00:00
source-file3.png  100%   12KB 274.4KB/s   00:00</code></pre>
</div>
</div>
<div class="paragraph">
<p>With quotes, wildcards are expanded by the remote shell instead of your local shell which cannot see the remote files.</p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git: Renaming tags</title>
      <link>https://www.andreaslongo.com/blog/rename-tag/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/rename-tag/</guid>
      <description>Be careful. Renaming tags might be difficult depending on your situation.
There is no single step for renaming a tag. You must create a new tag with a new name and then delete the old tag.
What you should know TLDR: When replacing tags, make sure that your new tag points to a commit object and not to an old tag object.
Git has the following types of tags:</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>Be careful.
Renaming tags might be difficult depending on your situation.</p>
</div>
<div class="paragraph">
<p>There is no single step for renaming a tag.
You must create a new tag with a new name and then delete the old tag.</p>
</div>
<div class="sect1">
<h2 id="_what_you_should_know">What you should know</h2>
<div class="sectionbody">
<div class="paragraph">
<p>TLDR: When replacing tags, make sure that your new tag points to a commit object and not to an old tag object.</p>
</div>
<div class="paragraph">
<p>Git has the following types of tags:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Annotated tag</p>
</li>
<li>
<p>GPG-signed tag</p>
</li>
<li>
<p>Lightweight tag</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>An annotated tag is a Git object.
A GPG-signed tag is an annotated tag and therefore also a Git object.
Both can point to other Git objects e.g. commits, including other annotated tags.
This can lead to chains of annotated tags which can break if you delete a tag in between.</p>
</div>
<div class="paragraph">
<p>A lightweight tag is not a Git object.
It is just a name or label for an object, usually a commit object.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_renaming_tags">Renaming tags</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_first_step">First step</h3>
<div class="paragraph">
<p>Review the commit logs and identify the tag you want to rename.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">git log --decorate --graph --oneline</code></pre>
</div>
</div>
<div class="paragraph">
<p>You want to know if the tag is lightweight or annotated.
You also want to know if the tag has been pushed to other remote repositories.
Others might rely on this tag if it is pushed.</p>
</div>
</div>
<div class="sect2">
<h3 id="_renaming_an_annotated_tag_local">Renaming an annotated tag (local)</h3>
<div class="paragraph">
<p>If you have an annotated tag which is local only:
Not yet pushed to a remote repository.</p>
</div>
<div class="listingblock">
<div class="title">(optional) Preserving the date of the tag:</div>
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># Get the date of the old tag
git show --date=iso &lt;old&gt;
git show --date=iso first-release

# Set the date for the new tag via environment variable
export GIT_COMMITTER_DATE=&#34;&lt;date&gt;&#34;
export GIT_COMMITTER_DATE=&#34;2021-01-22 16:24:39 +0100&#34;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Renaming the tag:</div>
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># Create a new tag
git tag --annotate &lt;new&gt; &#39;&lt;old&gt;^{}&#39;
git tag --annotate v1.0 &#39;first-release^{}&#39;

# Delete the old tag
git tag --delete &lt;old&gt;
git tag --delete first-release</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Renaming a GPG-signed tag:</div>
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># Create a new tag
git tag --sign &lt;new&gt; &#39;&lt;old&gt;^{}&#39;
git tag --sign v1.0 &#39;first-release^{}&#39;

# Delete the old tag
git tag --delete &lt;old&gt;
git tag --delete first-release</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>^{}</code> suffix tells Git to dereference the tag recursively until it finds an object which is not a tag.
This ensures that your new tag does not point to another tag which you might also want to rename.</p>
</div>
</div>
<div class="sect2">
<h3 id="_renaming_a_lightweight_tag_local">Renaming a lightweight tag (local)</h3>
<div class="paragraph">
<p>If you have a lightweight tag which is local only:
Not yet pushed to a remote repository.</p>
</div>
<div class="listingblock">
<div class="title">Renaming the tag:</div>
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># Create a new tag
git tag &lt;new&gt; &lt;old&gt;

# Delete the old tag
git tag --delete &lt;old&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_additional_steps_for_pushed_tags_remote">Additional steps for pushed tags (remote)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If your tag has been pushed to a remote repository, follow the steps above first.
Then continue here.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># Push the newly created tag
git push --tags &lt;new tag&gt;

# Delete the old tag from the remote
git push --delete &lt;remote&gt; &lt;old tag&gt;
git push --delete origin first-release</code></pre>
</div>
</div>
<div class="paragraph">
<p>Other users will receive a &#34;renamed&#34; tag as new tag from your remote repository.
Git will not delete old tags automatically.</p>
</div>
<div class="paragraph">
<p>You should remove deleted tags from local repositories.</p>
</div>
<div class="listingblock">
<div class="title">Deleting tags from local that no longer exist on the remote:</div>
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">git pull --prune --tags</code></pre>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git: Deleting remote tags</title>
      <link>https://www.andreaslongo.com/blog/delete-tag/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/delete-tag/</guid>
      <description> Removing a remote tag:
$ git push --delete &amp;lt;remote&amp;gt; &amp;lt;tag&amp;gt; $ git push --delete origin v1.0 Removing multiple remote tags:
$ git push --delete &amp;lt;remote&amp;gt; &amp;lt;tag-1&amp;gt; &amp;lt;tag-2&amp;gt; &amp;lt;...&amp;gt; $ git push --delete origin v1.0 </description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>Removing a remote tag:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ git push --delete &lt;remote&gt; &lt;tag&gt;
$ git push --delete origin v1.0</code></pre>
</div>
</div>
<div class="paragraph">
<p>Removing multiple remote tags:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ git push --delete &lt;remote&gt; &lt;tag-1&gt; &lt;tag-2&gt; &lt;...&gt;
$ git push --delete origin v1.0</code></pre>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Zsh: Configuration files</title>
      <link>https://www.andreaslongo.com/blog/zsh-config-files/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/zsh-config-files/</guid>
      <description>Zsh config files and the order of sourcing during startup.
1 ~/.zshenv always sourced
2 ~/.zprofile sourced if login shell
3 ~/.zshrc sourced if interactive shell
4 ~/.zlogin sourced if login shell
5 ~/.zlogout sourced when exiting shell</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>Zsh config files and the order of sourcing during startup.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">1 <code>~/.zshenv</code></dt>
<dd>
<p>always sourced</p>
</dd>
<dt class="hdlist1">2 <code>~/.zprofile</code></dt>
<dd>
<p>sourced if login shell</p>
</dd>
<dt class="hdlist1">3 <code>~/.zshrc</code></dt>
<dd>
<p>sourced if interactive shell</p>
</dd>
<dt class="hdlist1">4 <code>~/.zlogin</code></dt>
<dd>
<p>sourced if login shell</p>
</dd>
<dt class="hdlist1">5 <code>~/.zlogout</code></dt>
<dd>
<p>sourced when exiting shell</p>
</dd>
</dl>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Cygwin: A `sudo` like command</title>
      <link>https://www.andreaslongo.com/blog/cygwin-sudo-command/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/cygwin-sudo-command/</guid>
      <description>You can run commands from Cygwin with elevated permissions.
On Windows, you have something like Run as different user or Run as administrator. And on Linux, you probably use the sudo command for this.
To get similar functionality on Cygwin, you can add a new alias to your shell’s config file. The following is for Zsh, but it should also work for other bash-like shells.
~/.zshrc alias sudo=&amp;#39;cygstart --action=runas&amp;#39; Now you can run something like this to test the alias.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>You can run commands from <a href="https://cygwin.com">Cygwin</a> with elevated permissions.</p>
</div>
<div class="paragraph">
<p>On Windows, you have something like <code>Run as different user</code> or <code>Run as administrator</code>.
And on Linux, you probably use the <a href="https://www.sudo.ws"><code>sudo</code></a> command for this.</p>
</div>
<div class="paragraph">
<p>To get similar functionality on Cygwin, you can add a new alias to your shell’s config file.
The following is for <a href="https://www.zsh.org">Zsh</a>, but it should also work for other bash-like shells.</p>
</div>
<div class="listingblock">
<div class="title"><code>~/.zshrc</code></div>
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">alias sudo=&#39;cygstart --action=runas&#39;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now you can run something like this to test the alias.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ sudo touch sudo-test</code></pre>
</div>
</div>
<div class="paragraph">
<p>Windows will ask for your username and password.
Then it will run the command in the context of the given user.</p>
</div>
<div class="paragraph">
<p>That works, but the user experience is not great.</p>
</div>
<div class="paragraph">
<p>Your command gets executed in a new Cygwin process which automatically exits when the command returns.
Also, the user prompt is GUI based which interrupts your CLI workflow.</p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Cygwin: Change the default home directory</title>
      <link>https://www.andreaslongo.com/blog/cygwin-change-default-home-dir/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/cygwin-change-default-home-dir/</guid>
      <description>You can define the default home directory for all Cygwin users in the nsswitch.conf file.
For example, the following sets your default home directory to /cygdrive/c/Users/{user_name}/home, or in Windows notation to C:\Users\{user_name}\home.
/etc/nsswitch.conf db_home: /%H/home You can change it to whatever you like.
See the Cygwin documentation for more information. Look here below the /path section for more on supported wildcard characters.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>You can define the default home directory for all <a href="https://cygwin.com">Cygwin</a> users in the <code>nsswitch.conf</code> file.</p>
</div>
<div class="paragraph">
<p>For example, the following sets your default home directory to <code>/cygdrive/c/Users/{user_name}/home</code>, or in Windows notation to <code>C:\Users\{user_name}\home</code>.</p>
</div>
<div class="listingblock">
<div class="title"><code>/etc/nsswitch.conf</code></div>
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">db_home: /%H/home</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can change it to whatever you like.</p>
</div>
<div class="paragraph">
<p>See the <a href="https://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-mapping-nsswitch-home">Cygwin documentation</a> for more information.
Look <a href="https://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-mapping-nsswitch-passwd">here</a> below the <code>/path</code> section for more on supported wildcard characters.</p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Cygwin: Using the clipboard with Vim</title>
      <link>https://www.andreaslongo.com/blog/cygwin-vim-clipboard/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/cygwin-vim-clipboard/</guid>
      <description>To use the Windows clipboard in Vim on Cygwin, add the following to your Vim config file.
.vimrc set clipboard=unnamed Vim will now use the clipboard register * for yank, delete, change and put operations. The * register gets synced with the Windows clipboard automatically.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>To use the Windows clipboard in <a href="https://www.vim.org/">Vim</a> on <a href="https://cygwin.com">Cygwin</a>, add the following to your Vim config file.</p>
</div>
<div class="listingblock">
<div class="title"><code>.vimrc</code></div>
<div class="content">
<pre class="highlight"><code class="language-vim" data-lang="vim">set clipboard=unnamed</code></pre>
</div>
</div>
<div class="paragraph">
<p>Vim will now use the clipboard register <code>*</code> for yank, delete, change and put operations.
The <code>*</code> register gets synced with the Windows clipboard automatically.</p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vim: Undo branches</title>
      <link>https://www.andreaslongo.com/blog/undo-branches/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/undo-branches/</guid>
      <description>You can retrieve the state of your text as it was some time ago. This concept is called undo tree or undo branches.
Moving through the undo tree Go to newer/older text state.
g+ g- Go to older text state, 10 minutes before.
:earlier 10m Go to newer text state, 5 minutes later.
:later 5m Using g- and g+ will get you to all possible text states while repeating u and CTRL-R does not.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>You can retrieve the state of your text as it was some time ago.
This concept is called <strong>undo tree</strong> or <strong>undo branches</strong>.</p>
</div>
<div class="sect1">
<h2 id="_moving_through_the_undo_tree">Moving through the undo tree</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Go to newer/older text state.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-vim" data-lang="vim">g+
g-</code></pre>
</div>
</div>
<div class="paragraph">
<p>Go to older text state, 10 minutes before.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-vim" data-lang="vim">:earlier 10m</code></pre>
</div>
</div>
<div class="paragraph">
<p>Go to newer text state, 5 minutes later.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-vim" data-lang="vim">:later 5m</code></pre>
</div>
</div>
<div class="paragraph">
<p>Using <code>g-</code> and <code>g+</code> will get you to all possible text states while repeating <code>u</code> and <code>CTRL-R</code> does not.</p>
</div>
<div class="paragraph">
<p>See also <code>:help undo-branches</code>.</p>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Editor plugins for working with web APIs</title>
      <link>https://www.andreaslongo.com/blog/rest-api-editor-plugins/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreaslongo.com/blog/rest-api-editor-plugins/</guid>
      <description>These two plugins might come in handy if you are a developer or consumer of web APIs (e.g. REST).
They allow you to send requests to your API and receive responses without leaving your editor. You can quickly explore APIs while saving your calls along the way as simple text file for documentation and sharing. They might supplement or replace tools like curl or Postman in your workflow.
This plugin is for Vim.</description>
      <content:encoded><![CDATA[<div class="paragraph">
<p>These two plugins might come in handy if you are a developer or consumer of <a href="https://en.wikipedia.org/wiki/Web_API">web APIs</a> (e.g. REST).</p>
</div>
<div class="paragraph">
<p>They allow you to send requests to your API and receive responses without leaving your editor.
You can quickly explore APIs while saving your calls along the way as simple text file for documentation and sharing.
They might supplement or replace tools like <a href="https://curl.se/">curl</a> or <a href="https://www.postman.com/">Postman</a> in your workflow.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/diepm/vim-rest-console">This plugin</a> is for <a href="https://www.vim.org/">Vim</a>.
It is a wrapper around <code>curl</code>.</p>
</li>
<li>
<p><a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">This plugin</a> is for <a href="https://code.visualstudio.com/">Visual Studio Code</a>. It is similar to the Vim plugin.</p>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_clean_and_easy_requests">Clean and easy requests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With both plugins, you write your API request as text block in your editor and sent it to your API endpoint on demand.
The response then shows up in a new editor buffer/window.</p>
</div>
<div class="paragraph">
<p>You can write multiple request blocks in the same file and send them separately on demand.</p>
</div>
<div class="paragraph">
<p>Save the file for later reference and share it with others as an example.</p>
</div>
<div class="paragraph">
<p>The syntax for the two plugins is slightly different.
You cannot use a Vim request block directly with VS Code.
But it is straightforward to adjust the request block to make it work.</p>
</div>
<div class="paragraph">
<p><strong>To send requests</strong></p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Type in a request block.</p>
</li>
<li>
<p>Place the cursor anywhere within the block.</p>
</li>
<li>
<p>Hit the trigger key to send the request (default: <code>CTRL-J</code>).</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="title">Vim <code>./example.rest</code></div>
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh"># vim: set filetype=rest

# global curl options
--silent
--include
--

# GET
https://reqres.in
GET /api/users/2

# POST
https://reqres.in
POST /api/users
{
    &#34;name&#34;: &#34;andreas&#34;,
    &#34;job&#34;: &#34;consultant&#34;
}

# DELETE
https://reqres.in
DELETE /api/users/2</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tip">Tip</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can add query parameters like so:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-plaintext" data-lang="plaintext">https://reqres.in
GET /api/users?per_page=2&amp;page=4</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or you can write the same request like this for better readability:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-plaintext" data-lang="plaintext">https://reqres.in
GET /api/users
per_page=2
page=4</code></pre>
</div>
</div>
<div class="paragraph">
<p>If your query parameters are more complex, you may be required to enable the <a href="https://github.com/diepm/vim-rest-console#54-line-by-line-request-body">Line-by-line Request Body</a> option for the Vim plugin when your query does not work otherwise.</p>
</div>
<div class="listingblock">
<div class="title">Complex query:</div>
<div class="content">
<pre class="highlight"><code class="language-plaintext" data-lang="plaintext">https://localhost:8001
GET /api/content/search
limit=10
cql=(type=page and space=IT and label=infrastructure)</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Vim plugin option:</div>
<div class="content">
<pre class="highlight"><code class="language-plaintext" data-lang="plaintext">:let b:vrc_split_request_body = 1</code></pre>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
