[{"uri":"https://www.andreaslongo.com/training/database-fundamentals/6-advanced-concepts/relationships/","title":"Beziehungen","tags":[],"description":"","content":" Mit Beziehungen zwischen einzelnen Tabellen können wir unsere Daten strukturieren. Wir können verschiedene Arten von Beziehungen nutzen, um unterschiedliche Gegebenheiten aus der realen Welt zu modellieren.\nMit relationalen Datenbank können drei Arten von Beziehungen hergestellt werden:\nEins zu Eins (one to one)\nEins zu Mehreren (one to many\nMehrere zu Mehrere (many to many)\nDie \u0026#34;Eins zu Eins\u0026#34; Beziehung Eins zu Eins Beziehungen werden über die Primärschlüssel (Primary Keys) von Tabellen hergestellt.\nclassDiagram Mitarbeiter \"1\" --\u003e \"1\" MitarbeiterDetails class Mitarbeiter{ MitarbeiterID: Key Vorname Nachname Telefonnummer Email ... } class MitarbeiterDetails{ MitarbeiterID: Key Gehalt Kontonummer Sozialversicherungsnummer ... } Mit einer solchen Aufteilung kannst du zum Beispiel schützenswerte Informationen über einen Mitarbeiter nur für bestimmte Zwecke freigeben. Soll zum Beispiel ein Mitarbeiter einen Newsletter an alle Mitarbeiter schicken, kannst du ihn nur für die Tabelle Mitarbeiter freigeben. Er sieht damit nicht automatisch das Gehalt von jedem Mitarbeiter.\nWenn wir die beiden Primärschlüssel miteinander verbinden, entsteht eine \u0026#34;Eins zu Eins\u0026#34; Beziehung. Jede MitarbeiterID, die du aus der Tabelle Mitarbeiter auswählst wird auch nur einmal in der MitarbeiterDetails Tabelle gefunden\nDie \u0026#34;Eins zu Mehreren\u0026#34; Beziehung Dies ist die am häufigsten genutzte Beziehung.\nclassDiagram Kunden \"1\" --\u003e \"*\" Bestellungen class Kunden{ KundenID: Key Vorname Nachname Adresse ... } class Bestellungen{ BestellungenID: Key KundenID Produkt Preis ... } Wenn wir die beiden Tabellen über die Spalte KundenID verbinden, entsteht eine \u0026#34;Einz zu Mehreren\u0026#34; Verbindung. Wir hoffen natürlich, dass ein Kunde nicht nur eine, sondern mehrere Bestellungen bei uns tätigt.\nJede KundenID kann mehrmals in der Tabelle Bestellungen stehen. Jeder Kunde kann also mehrere Bestellungen aufgeben. Aber, jede Bestellung kann maximal von einem Kunden getätigt werden.\nSetzen wir nun noch die NOT NULL Regel in der Bestellungen Tabelle auf der KundenID Spalte, dann muss für eine Bestellung immer auch ein Kunden eingetragen sein.\nDie \u0026#34;Mehrere zu Mehrere\u0026#34; Beziehung Ein Schüler belegt mehrere Schulfächer. An einem Schulfach, einer Unterrichtsstunde, nehmen mehrere Schüler teil.\nUm diese Beziehung abzubilden, benötigen wir eine weitere Tabelle (Junction-Tabelle).\nclassDiagram Schüler \"1\" --\u003e \"*\" Einschreibungen Schulfach \"1\" --\u003e \"*\" Einschreibungen class Schüler { SchülerID: Key Vorname Nachname Hauptfach ... } class Schulfach { SchulfachID: Key Lehrer RaumNummer ... } class Einschreibungen { EinschreibungID: Key SchülerID SchulfachID Jahrgangsstufe ... } Jeder Datensatz in der Einschreibungen Tabelle wird mit einem Schüler und einem Schulfach verknüpft.\nJeder Schüler steht mehrmals in der Einschreibungen Tabelle und jedes Schulfach steht ebenfalls mehrmals in der Tabelle Einschreibungen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/database-server/","title":"Der Datenbankserver","tags":[],"description":"","content":" Wenn wir mit Datenbanken arbeiten, reden wir oft vom Datenbankserver. Aber wozu brauchen wir diesen?\nWas macht ein Datenbankserver? Ein Datenbankserver stellt unsere Datenbanken bereit, damit wir mit ihnen arbeiten können.\nAuf dem Datenbankserver läuft unsere Database Management System (DBMS) Software. Wenn wir ein DBMS installieren, erstellen wir damit eine sogenannte Instanz. Eine DBMS Installation ist also eine Instanz unseres Datenbanksystems.\nEin Server kann mehrere DBMS Instanzen zeitgleich und unabhängig voneinander betreiben. Im der Regel installieren wir aber nur eine Instanz pro Server.\nNachdem du eine Instanz installiert hast, kannst du dich über das Netzwerk mit dieser Instanz verbinden.\nDu schickst Befehle an die Instanz.\nDie Instanz bearbeitet die Befehle und sendet Ergebnisse an dich zurück.\nAuch alle anderen Benutzer deiner Datenbank verbinden sich über das Netzwerk mit der Instanz. Das sind die Clients deines Datenbanksystems. Jede Verbindung zu deinem Server ist eine Client-Verbindung.\nDas Server System Wir können einen Datenbankserver auf einem physikalischer Server oder auf einem virtuellen Server betreiben. Beides hat seine Vor- und Nachteile und es kommt immer auf die aktuellen Situation an, welches die beste Lösung ist.\nDatenbankserver sollen oft große Datenmengen schnellstmöglich verarbeiten. Das stellt hohe Anforderungen an Hardware Ressourcen wie Prozessoren, Arbeitsspeicher und Festplattenspeicher.\nFür ein schnelles Datenbanksystem solltest du folgende Punkte beachten:\nSchnelle Festplatten für Lese- und Schreibzugriffe\nViel Arbeitsspeicher um die Festplatten zu entlasten\nMehrere Prozessoren um viele Berechnungen gleichzeitig ausführen zu können\nSchnelle Netzwerkverbindung um die Daten bereitzustellen\nFür sehr große Datenbanksysteme können einzelne Server zu einem Cluster gebündelt werden. Wir können damit die Arbeitslast auf mehrere Server aufteilen. Außerdem können wir damit eine Ausfallsicherheit erreichen. Einzelne Cluster Systeme können dabei an unterschiedlichen Orten, zum Beispiel in unterschiedlichen Rechenzentren stehen.\nDein eigener Datenbankserver Wenn du nach diesem Kurs noch weiter mit Datenbanken experimentieren möchtest, kannst du dir deinen eigenen Datenbankserver auf deinem Computer installieren.\nMicrosoft SQL Server Express In diesem Kurs nutzen wir Microsoft SQL Server als unser DBMS.\nDie SQL Server Express Edition lässt sich auf fast jedem beliebigen Windows Computer installieren. Es sind nicht alle Funktionen der \u0026#34;größeren\u0026#34; Editionen enthalten. Dafür brauchst du für die Installation aber auch keine eigene Server Hardware.\nDie Express Edition ist trotzdem ein vollwertiges Datenbanksystem. Du kannst dir damit alle Beispiele aus diesem Kurs noch einmal selbst anschauen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/1-start/","title":"Start","tags":[],"description":"","content":" Bevor wir mit dem Kurs beginnen Start "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/transactions/","title":"Transaktionen","tags":[],"description":"","content":" In diesem Abschnitt beschäftigen wir uns mit SQL-Befehlen zum bearbeiten von Datensätzen. Diese Befehle basieren auf sogenannten Transaktionen.\nWas sind Transaktionen? Zum Beispiel ist das Hinzufügen neuer Datensätze eine Transaktion.\nEine Transaktion kann entweder erfolgreich sein (alles OK) oder fehlschlagen. Schlägt eine Transaktion fehl, dann macht das Datenbanksystem alle Änderungen innerhalb dieser Transaktion rückgängig. Das ist ein Sicherheitsmechanismus des Datenbanksystems um Probleme innerhalb einzelner Datensätze zu vermeiden.\nEine erfolgreiche Transaktion Stelle dir zum Beispiel vor, du möchtest einen neuen Kunden in deiner Tabelle Kunden erfassen.\nDu startest damit eine Transaktion.\nDie Kundennummer wird erfolgreich gespeichert.\nDer Vorname wird erfolgreich gespeichert.\nDer Nachname wird erfolgreich gespeichert.\nDamit ist der Datensatz komplett und die Transaktion erfolgreich abgeschlossen.\nEine fehlgeschlagene Transaktion Nun möchtest du einen weiteren Kunden hinzufügen.\nDu startest damit eine weitere Transaktion.\nDie Kundennummer wird erfolgreich gespeichert.\nDer Vorname wird erfolgreich gespeichert.\nDer Nachname kann nicht gespeichert werden, du bekommst eine Fehlermeldung.\nDamit du in einem solche Fall keine unvollständigen Datensätze in deiner Datenbank hast, macht das Datenbanksystem die komplette Transaktion rückgängig. Kundennummer und Vorname werden also wieder entfernt. Sonst hättest du einen Kunden in deiner Datenbank ohne Nachnamen.\nGroße und kleine Transaktionen Es gibt auch größere Transaktionen. Du könntest zum Beispiel 100 neue Kunden auf einmal eintragen. Kommt es bei einem dieser Kunden zu Problemen, wird auch hier die gesamte Transaktion rückgängig gemacht.\nDurch Transaktionen kannst du dir immer sicher darüber sein, was in deiner Datenbank gespeichert wird und was nicht. Es wird entweder alles gespeichert, oder im Fehlerfall nichts.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/sql-language/","title":"Was ist SQL?","tags":[],"description":"","content":" Die Structured Query Language (SQL) ist eine weit verbreitete Sprache, ähnlich einer Programmiersprache, zur Verwaltung von relationalen Datenbanken.\nMit SQL kannst du…​\nDatenstrukturen erstellen\nDatensätze erfassen und ändern\nDatensätze abfragen\n…​\nMicrosoft SQL Server nutzt eine Variante der SQL Standardsprache und nennt diese Transact SQL (T-SQL). Diese Variante erweitert die grundlegende Sprache SQL um einige Zusatzkomponenten.\nIn diesem Kurs befassen wir uns mit der grundlegenden Sprache SQL. Du wirst also die SQL Anweisungen aus diesem Kurs oder zumindest Teile davon auf fast jedem anderen SQL basierten Datenbanksystem einsetzen können.\nSQL Anweisungen Nachdem du gelernt hast, wie du Aktionen mit dem Management Studio ausführen kannst, schauen wir uns nun einige Grundlagen der SQL Sprache an.\nMit SQL kannst du so gut wie alle Aktionen aus dem Management Studio \u0026#34;programmieren\u0026#34;. Du kannst damit einzelne Aktionen genauer steuern und diese bei Bedarf mehrfach und auch automatisch ausführen. Außerdem kannst du deinen SQL Anweisungen speichern und später wiederverwenden.\nSQL-Befehle Hier findest du eine Übersicht der am häufigsten verwendeten SQL-Befehle.\nFolgende Befehle werden verwendet, um die Strukturen einer Datenbank zu definieren. Du kannst damit Datenbank Objekte, wie zum Beispiel Tabellen, Views oder ganze Datenbanken erstellen oder ändern.\nCREATE\tDROP USE\tTRUNCATE ALTER Die nächsten Befehle erlauben es dir, mit Datensätzen zu arbeiten. Du kannst damit Datensätze abfragen, erstellen, ändern oder löschen.\nINSERT\tSELECT UPDATE\tDELETE MERGE Regeln der SQL Sprache Bevor wir unsere eigenen SQL Anweisungen schreiben, solltest wir uns noch einige Regeln der Sprache anschauen.\nGroß- und Kleinschreibung SQL unterscheidet nicht zwischen Groß- und Kleinschreibung. Der Befehl USE ist gleich use, uSe oder Use.\nSchreibe jedoch deine Befehle immer in Großbuchstaben. Damit kannst du deinen Anweisungen leichter lesen.\nUSE [meineDatenbank]; SELECT Artikel,Kunde,Datum,Preis FROM Tabelle_1; Leerzeichen SQL ignoriert Leerzeichen. Das erlaubt es dir, deinen Anweisungen mit Leerzeichen zu formatieren. Damit kannst du deinen Code leichter lesen.\nUSE [meineDatenbank]; SELECT Artikel, Kunde, Datum, Preis FROM Tabelle_1; Abschluss einer Anweisung Nutze am Ende jeder Anweisung das sogenannte Statement Terminator Zeichen ;.\nDamit signalisierst du dem Programm, dass die Anweisung beendet ist und mit der nächsten Anweisung weitergemacht werden kann.\nKommentare Du kannst Kommentare in deinen SQL Code einfügen. Kommentare werden nicht ausgeführt. Damit kannst du zum Beispiel Notizen in deinem Code hinterlegen.\n/* Dies ist ein Block-Kommentar Er kann mehrere Zeilen lang sein. */ USE [meineDatenbank]; -- Dies ist ein Zeilenkommentar, er ist nur eine Zeile lang. SELECT artikel, kunde FROM tabelle_1; Automatische Vorschläge im Management Studio Wenn du SQL Code im Management Studio schreibst, bekommst du automatisch Vorschläge zu Anweisungen oder Objekten, die du verwenden kannst. Diese Funktion nennt sich IntelliSense.\nIntelliSense warnt dich auch, wenn es Fehler in deiner Anweisung entdeckt und markiert die Stellen entsprechend.\nManchmal kann es notwendig sein IntelliSense neu zu laden. Drücke STRG+Shift+R wenn du keine oder falsche Vorschläge von IntelliSense bekommst.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/databases/","title":"Was sind Datenbanken?","tags":[],"description":"","content":" Datenbanken sind ein zentraler Bestandteil unseres modernen Lebens. Sie kommen überall dort zum Einsatz, wo Informationen jeglicher Art gespeichert und verarbeitet werden. Du nutzt täglich mehrere Datenbanken, ohne davon etwas zu merken.\nDatenbanken findest du beispielsweise…​\nin Rechenzentren\nauf deinem Computer\nauf deinem Smartphone\nauf deinem Fernsehgerät\n…​\nAber was sind Datenbanken überhaupt und welche Vorteile bringen sie uns in der Welt der Datenverarbeitung?\nWas sind Daten? In der Informatik und Datenverarbeitung verstehen wir unter Daten eine digitale Repräsentation von Information.\nAngenommen du schreibst dir eine Liste mit Filmen, die du dir gerne anschauen möchtest. Tust du das auf einem Blatt Papier, erzeugst du damit analoge Daten. Nutzt du deinen Computer und speicherst die Liste in eine Datei, dann erzeugst du digitale Daten.\nDu überlegst dir also, welche Informationen du für deine Liste benötigst, zum Beispiel den Titel des Films. Dann digitalisierst du diese Informationen aus deinem Kopf, indem du sie in einer Datei speicherst. Du erzeugst damit Daten aus Informationen.\nWas ist eine Bank? Du bringst vermutlich dein Geld zu einer Bank.\nDie Bank sorgt dafür, dass das Geld auf deinem Konto…​\nsicher verwahrt ist,\ndu es jederzeit abrufen kannst,\nund, dass sich nicht ungewollt etwas an deinem Kontostand ändert.\nIn der Informatik und Datenverarbeitung kannst du deine Daten zu einer Datenbank bringen.\nWas ist eine Datenbank? Eine Datenbank ist zunächst einmal eine strukturierte Ansammlung von Daten.\nDas kann eine einfache Liste auf einem Blatt Papier sein, wie zum Beispiel eine Einkaufsliste. Es kann auch eine Tabelle sein, beispielsweise ein Schulstundenplan.\nWenn wir in der Informatik über eine Datenbank reden, meinen wir jedoch üblicherweise eine Computerdatei zum speichern von digitalen Daten.\nIn einer solchen Datei legen wir Strukturen fest, um unsere Daten dort einsortieren zu können. Wir tun das oft in der Form von Tabellen und Spalten. Wir legen außerdem Regeln fest, an die sich unsere Daten halten müssen. Wir möchten zum Beispiel nicht, dass eine E-Mail Adresse in einer Spalte für Vornamen eingetragen wird.\nMit Hilfe einer Datenbank können wir auf sehr flexible Weise Daten speichern und abrufen.\nWas ist ein Datenbanksystem? Bei einer echten Bank hast du ein Konto. Dort legst du dein Geld ab. Die Bank verwaltet dein Konto und noch viele weitere Konten von anderen Kunden.\nNun hast du eine Datenbank. Dort speicherst du deine Daten. Ein Datenbanksystem verwaltet deine Datenbank und noch viele weitere Datenbanken.\nEin Datenbanksystem sorgt dafür, dass die Daten in deiner Datenbank…​\nsicher verwahrt sind,\ndu sie jederzeit abrufen kannst,\nund, dass sich nicht ungewollt etwas an deinen Daten ändert.\nDas Datenbanksystem sorgt dafür, dass die festgelegten Strukturen und Regeln für deine Daten eingehalten werden.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/7-end/next-steps/","title":"Wie geht es weiter?","tags":[],"description":"","content":" Vielen Dank für deine Teilnahme :-) Wir sind damit am Ende unseres Kurses angelangt. Ich hoffe du hast viel Neues gelernt und fühlst dich nun gut gerüstet, für deine Arbeit mit Datenbanken.\nWenn du Fragen hast oder wenn dich einfach etwas interessiert, darfst du dich gerne an mich wenden. Du erreichst mich am besten per Email.\nWas kannst du tun? Wenn du dein Wissen vertiefen und weiter mit Datenbanken arbeiten möchtest, kannst du dir dein eigenes DBMS auf deinem Computer installieren.\nDu kannst dir dazu eine Version des Microsoft SQL Server Express kostenlos herunterladen.\nSQL Server Express ist sehr ähnlich zu dem, was du in diesem Kurs kennengelernt hast. Du kannst dich dann mit dem Management Studio zu deinem eigenen SQL Server Express verbinden und dir die Beispiele aus dem Kurs noch einmal in aller Ruhe anschauen.\nExperimentiere ruhig ein wenig und probiere neue, vielleicht auch eigene Sachen und Ideen aus. Das ist die beste Methode zum Lernen.\nDie Beispiele aus diesem Kurs findest du hier:\nBeispiele\nDie .sql Dateien enthalten unsere SQL Abfragen. Du kannst sie dir im Management Studio anschauen. Die .bak Dateien enthalten Backups unserer Beispieldatenbanken. Diese kannst du als neue Datenbank auf deinem Server restoren.\nWie geht es mit diesem Kurs weiter? Dies ist die erste Version meines Kurses \u0026#34;Einstieg Datenbanken\u0026#34;. Der Kurs wird von mir, mehr oder weniger regelmäßig, überarbeitet. Fehler werden korrigiert, Kapitel werden angepasst oder ergänzt oder es kommen neue Kapitel hinzu.\nAlle Änderungen findet du hier auf dieser Seite. Es kann sich also lohnen, wenn du ab und an vorbeischaust.\nFalls dir Fehler oder sonst etwas auffällt, freue ich mich über eine Kurze Nachricht von dir, damit ich diese korrigieren kann.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/1-start/welcome/","title":"Willkommen","tags":[],"description":"","content":" Ich heiße dich herzliche Willkommen zu unserem ersten Kurs \u0026#34;Einstieg Datenbanken\u0026#34;.\nIn diesem Kurs lernst du grundlegenden Konzepte kennen, die dir die Arbeit mit Datenbanken ermöglichen. Der Kurs soll dir ein solides Grundwissen vermitteln, das dir in deiner gesamten IT-Karriere nützlich sein wird.\nAm Ende des Kurses wirst du…​\nverschiedene Modelle zur Speicherung von Daten kennen.\nDatenbanken grundlegend administrieren und verwalten können.\nObjekte einer Datenbank und Datensätze erstellen und bearbeiten können.\ndeine erste eigene Datenbank erstellt haben.\nGrundlagen der SQL Sprache kennen.\nEinen Einblick in fortgeschrittene Konzepte wie Beziehungen, Indizes und Schemas haben.\nDas Thema Datenbanken ist nicht ganz einfach. Wir werden einige komplizierte und komplexe Themen anschneiden. Ärgere dich also nicht, wenn du nicht alles gleich auf Anhieb verstehst. Du kannst dir die Webseite zum Kurs jederzeit und in aller Ruhe noch einmal anschauen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/database-system/","title":"Das Datenbanksystem","tags":[],"description":"","content":" Ein Datenbanksystem besteht aus zwei Komponenten:\neine oder mehrere Datenbanken\neine Verwaltungssoftware, das Database Management System (DBMS)\nDas Database Management System (DBMS) ist ein Programm zum Erstellen und Verwalten von Datenbanken.\nZum Vergleich: Microsoft Excel ist ein Programm zum Erstellen und Verwalten von Kalkulationstabellen.\nEin DBMS stellt dir einen hoch-strukturierten und effizienten Speichermechanismus für deine Daten zur Verfügung.\nVielleicht hast du schon einmal von den verschiedenen SQL basierten DBMS gehört. Zu den populärsten gehören MySQL, PostgreSQL, SQLite, und Microsoft SQL Server. All diese Systeme sind mit dem SQL Standard konform, den du später noch kennenlernen wirst.\nFunktionen eines DBMS Ein DBMS hilft dir bei diesen Aufgaben.\nFestlegen von Strukturen und Regeln für deine Daten\nDu legst Strukturen und Regeln fest, an die sich deine Daten halten müssen.\nDas DBMS sorgt dafür, dass diese Strukturen und Regeln eingehalten werden.\nErfassen von Daten\nDu speicherst Daten in der vorgegebenen Struktur.\nDas DBMS sorgt dafür, dass die Daten organisiert und konsistent in der Datenbank gespeichert werden.\nAbrufen von Daten\nDu rufst Daten aus deiner Datenbank ab.\nDas DBMS sorgt dafür, dass du deine Daten schnell und zuverlässig abrufen kannst.\nSchützen von Daten\nDu möchtest deine Daten vor unberechtigten Zugriffen schützen.\nDas DBMS steuert Zugriffe über Benutzer (Logins) und deren Berechtigungen.\nDu möchtest deine Daten vor Verlust und Zerstörung schützen.\nDas DMBS bietet dir Wartungs- und Sicherungsfunktionen (Backups) dafür an.\nMicrosoft SQL Server In diesem Kurs nutzen wir Microsoft SQL Server als unser DBMS.\nSQL Server ist ein zuverlässiges DBMS und wird seit vielen Jahren von kleinen bis großen Unternehmen genutzt. Es ist eines der DBMS Systeme, die am besten mit Microsoft Windows kompatibel sind.\nIm weiteren Verlauf des Kurses wirst du mit Hilfe des DBMS Strukturen und Regeln für deine Daten festlegen. Du wirst Daten in einer Datenbank speichern und lernen, wie du Daten aus der Datenbank abrufen kannst.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/","title":"Datenbanken","tags":[],"description":"","content":" Modelle zur Speicherung von Daten Datenbanken "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/create/","title":"Der CREATE Befehl","tags":[],"description":"","content":" Mit CREATE kannst du neue Objekte erstellen.\nEine Tabelle erstellen Du kannst zum Beispiel eine neue Tabelle in deiner Datenbank anlegen.\nÖffne im Management Studio deine Datenbank, suche dir eine Tabelle aus und starte den Designer. Du siehst das Design der Tabelle.\nBeispiel Tabelle Table 1. Mitarbeiter (Tabelle) Column Name Data Type AllowNulls MitarbeiterID\nint\nVorname\nnvarchar(50)\nNachname\nnvarchar(50)\nJob\nnvarchar(50)\nx\nEmail\nnvarchar(50)\nDie Spalte MitarbeiterID ist hier als Identity Feld konfiguriert (Identity Specification: yes), damit die Spalte automatisch mit ID Nummern befüllt wird. Diese Spalte ist außerdem unser Primärschlüssel (Primary Key).\nWir wollen nun die gleiche Tabelle mit SQL Anweisungen erstellen anstatt mit dem Designer.\nSQL Anweisungen Klicke dazu im Management Studio auf New Query um eine neue Abfrage zu öffnen. Es erscheint nun ein Editor Fenster. Schreibe dort den den folgenden SQL Code hinen.\nCREATE TABLE MitarbeiterKopie ( MitarbeiterID int IDENTITY (1,1) NOT NULL, Vorname nvarchar(50) NOT NULL, Nachname nvarchar(50) NOT NULL, Job nvarchar(50) NULL, Email nvarchar(50) NOT NULL ); Bevor du SQL Anweisungen ausführst…​ …​solltest du immer folgende Punkte beachten:\nStelle sicher, dass du mit der richtige Datenbank verbunden bist. Du erkennst das in der Statusleiste deiner Abfrage. Du siehst die aktive Datenbank auch in einem Drop-Down Feld. Dort kannst du die Verbindung bei Bedarf ändern.\nLasse deine Abfrage prüfen. Klicke dazu auf das Symbol mit dem grünen Haken oder nutze die Tasten STRG+F5\nDie SQL Anweisung auführen Wenn du mit der richtigen Datenbank verbunden bist und du deine Abfrage geprüft hast, starte die Abfrage mit einem Klick auf Execute.\nDu hast nun eine neue Tabelle erstellt.\nEine neue Datenbank anlegen Mit CREATE kannst du auch eine komplett neue Datenbank anlegen.\nÖffne im Management Studio ein neues Query und schreibe Folgendes in den Editor:\nCREATE DATABASE MeineNeueDatenbank; Prüfe nun deine Abfrage und starte sie.\nDu hast nun eine neue Datenbank erstellt.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/select/","title":"Der SELECT Befehl","tags":[],"description":"","content":" Mit SELECT kannst du Datensätze aus einer Tabelle abfragen.\nDer Hauptgrund, warum wir Daten in einer Datenbank speichern ist, dass wir hinterher schnell und einfach Daten daraus abfragen können.\nWir möchten verschiedene Datensätze kombinieren um spezielle Fragen zu beantworten wie zum Beispiel \u0026#34;Wie viele rote Pullover wurden im letzten Jahr an Kunden aus Salzburg verkauft?\u0026#34;. Du kannst deine Abfragen auf vielfältige und flexible weisen filtern um genau die Daten zu bekommen, die du benötigst.\nSELECT ist damit der am meisten verwendete SQL-Befehl.\nDatensätze abfragen Eine Spalte abfragen Öffne ein neues Query.\nFrage nun eine Spalte aus deiner Tabelle ab.\nUSE [MeineNeueDatenbank]; SELECT Artikel FROM ProduktListe; Prüfe die Abfrage und führe sie aus.\nDu siehst nun die Einträge aus der Spalte Artikel\nMehrere Spalten abfragen Frage nun mehrere Spalten auf einmal ab.\nSELECT Artikel, Beschreibung FROM ProduktListe; Prüfe die Abfrage und führe sie aus.\nDu siehst nun die Einträge aus der Spalte Artikel und Beschreibung\nAlle Spalten abfragen Frage nun alle Spalten der Tabelle auf einmal ab.\nSELECT * FROM ProduktListe; Prüfe die Abfrage und führe sie aus.\nDu siehst nun die Einträge aller Spalten aus der Tabelle.\nErgebnisse anpassen Du kannst die Namen der Spalten in deiner Ergebnisliste anpassen.\nSELECT Artikel AS [Der Artikelname], Beschreibung AS [Die Artikelbeschreibung] FROM ProduktListe; Prüfe die Abfrage und führe sie aus.\nDu siehst nun die Einträge aller Spalten aus der Tabelle. Die Spalten in den Ergebnissen haben andere Namen.\nDie WHERE Klausel Mit der WHERE Klausel kannst du Datensätze in deiner Abfrage filtern.\nMit WHERE kannst du Kriterien festlegen, die deine Datensätze erfüllen müssen um weiter verarbeitet zu werden. Du kannst damit zum Beispiel Änderungen an deinen Datensätze sehr genau steuern.\nZum Beispiel kannst du eine Anweisung schreiben: \u0026#34;Ändere den Preis für Produkt Pullover, aber nur, wenn dessen Farbe rot ist.\u0026#34;\nDatensätze filtern In den bisherigen SELECT Abfragen hast du immer alle Datensätze deiner Tabelle als Ergebnis zurückbekommen. Jetzt möchten wir nur bestimmte Datensätze sehen.\nProdukte mit niedrigen Preisen anzeigen Du filterst also deine Ergebnisse mit Hilfe der WHERE Klausel.\nSELECT Artikel, Beschreibung, Preis FROM ProduktListe WHERE Preis \u0026lt; 50; Prüfe die Abfrage und führe sie aus.\nDu siehst nun alle Datensätzen bei denen der Preis niedriger als 50 ist.\nEin bestimmtes Produkt anzeigen Jetzt möchtest du alle Details eines bestimmten Produkts sehen.\nSELECT * FROM ProduktListe WHERE ProduktID = 5; Du siehst nun alle Spalten des Produkts mit der ProduktID = 5.\nProdukte mit anzeigen, die mit P anfangen Nun lasse dir alle Artikel anzeigen, die mit dem Buchstaben P anfangen.\nSELECT * FROM ProduktListe WHERE Artikel LIKE \u0026#39;P%\u0026#39;; Du siehst nun alle Artikel, die mit P anfangen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/6-advanced-concepts/constraints/","title":"Regeln (Constraints)","tags":[],"description":"","content":" Wenn wir Regeln für Spalten unserer Tabellen festlegen, können wir sicherstellen, dass die Daten in unseren Tabellen immer so gespeichert werden, wie wir es vorgeben.\nIn SQL Server können wir sogenannte Constraints festlegen.\nEine Constraint festlegen Wir möchten nun für unsere Tabelle Bestellungen festlegen, dass das Bestelldatum entweder der aktuelle Tag sein muss, oder in der Vergangenheit liegt.\nDamit stellen wir sicher, dass in einer Bestellung nicht fälschlicherweise ein Datum aus der Zukunft eingetragen ist. Wir können schließlich nicht vorhersehen, an welchem zukünftigen Tag jemand eine Bestellung tätigt.\nÖffne im Management Studio die Tabelle Bestellungen. Klicke mit der rechten Maustaste auf den Bereich Constraints und wähle New Constraint…​ Es öffnet sich ein neues Fenster in dem wir eine neue Constraint eintragen.\nUnter dem Punkt Expression tragen wir nun folgendes ein: Datum ⇐ GETDATE(). Das bedeutet, in unserer Tabelle Bestellungen dürfen in die Spalte Datum nur Werte eingetragen werden, die kleiner sind als das Ergebnis von GETDATE(). GETDATE() ist eine Funktion, die beim Aufruf immer das aktuelle Datum als Ergebnis zurückgibt.\nWir ändern nun noch den Namen der Constraint beim Punkt Identity (Name) auf: CK_Bestellungen_Datum, damit wir später genau wissen, wofür die Constraint gedacht ist.\nSpeichere nun deine Änderungen. Du siehst jetzt die neue Constraint unter dem Punkt Constraints deiner Tabelle.\nTeste nun dein Constraint indem du versuchst einen Wert in der Spalte Datum deiner Tabelle zu ändern.\nEinen Unique Index festlegen Mit einem Unique Index kannst du festlegen, dass alle Werte in einer Spalte einzigartig sein müssen. Es dürfen also keine doppelten Einträge gemacht werden.\nWir möchten nun in unserer Tabelle Mitarbeiter festlegen, dass in der Spalte Email keine doppelten Email Adressen eingetragen werden dürfen. Dazu legen wir einen sogenannten Unique Index an.\nÖffne nun im Management Studio den Designer für die Tabelle Mitarbeiter. Klicke mit der rechten Maustaste auf eine freie Fläche des Designers und wähle Indexes/Keys…​ aus. Es öffnet sich ein neues Fenster in dem wir Keys und Indizes konfigurieren können.\nWir sehen dort schon einen Eintrag PK_Mitarbeiter. Das ist unser früher festgelegte Primary Key auf der Spalte MitarbeiterID.\nWir fügen nun mit Add einen neuen Index hinzu. Unter dem Punkt (General) ändern wir den Wert von Is Unique auf Yes. Bei Columns tragen wir die Spalte Email ein. Ändern noch den Namen des Indexes beim Punkt Identity (Name) auf: UIX_Mitarbeiter_Email, damit du ihn später wiederfindest.\nSchließe nun die Fenster und speichere die Einstellungen der Tabelle. Du siehst jetzt unter dem Punkt Indexes deiner Tabelle einen neuen Unique Index.\nDurch den Unique Index erlaubt es das Datenbanksystem nun nicht mehr, dass zwei Mitarbeiter dieselbe Email Adresse haben.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/install-sql-express/","title":"SQL Server Express installieren","tags":[],"description":"","content":" Vorbereitung Installiere alle Updates für dein Betriebssystem (Windows Updates)\nStarte die Installation mit einem klick auf die SQL Server Datei, die du zur Vorbereitung auf diesen Kurs heruntergeladen hast.\nEs werden nun einige Dateien auf deinen Computer geladen. Wenn der Prozess abgeschlossen ist, siehst du ein neues Verzeichnis, welches eine SETUP.exe Datei enthält.\nInstallation Starte das SQL Server Installation Center mit einem Klick auf die SETUP.exe.\nKlicke im Menü auf Installation\nWähle New SQL Server stand-alone installation or add features to an existing installation aus\nAkzeptiere die Lizenzverainbarungen\nDas Setup zeigt dir jetzt eventuell fehlende Anforderungen an, die du erfüllen musst, bevor du die Software installieren kannst. Weitere Infos zu den Anforderungen zeigt dir das Setup. Sind alle Anforderungen erfüllt, kommst du zur Feature Selection Liste.\nWähle folgende Features aus\nDatabase Engine Services\nManagement Tools - Basic\nManagement Tools - Complete\nIm Instance Configuration Bildschirm, gib deiner Instanz den Namen SQL\nServer Configuration → Service Accounts, Collation\nDatabase Engine Configuration → Authentication Mode, sa account, Data Directories\nDocumentation Website\nInstallation Log Files\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/1-start/requirements/","title":"Was du benötigst","tags":[],"description":"","content":" Für unsere Live-Schulung benötigst du…​ einen Internetzugang\nMicrosoft Teams mit Mikrofon, Headset oder Ähnlichem\nund eine aktuelle Version des SQL Server Management Studios, fertig installiert auf deinem Computer\nBitte bereite alles einen Tag vor Beginn der Schulung vor Lade das SQL Server Management Studio herunter und installiere es auf deinem Computer. Dabei ist nichts weiter zu beachten. Die Setup Routine führt dich durch die Installation.\nTestet bitte dein Mikrofon mit Microsoft Teams und startet einmal das Management Studio.\nDownload Management Studio (640 MB) https://aka.ms/ssmsfullsetup (direkt link)\nhttps://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/","title":"Datenbank Server","tags":[],"description":"","content":" Bereitstellen von Datenbanken Datenbank Server "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/insert/","title":"Der INSERT Befehl","tags":[],"description":"","content":" Mit INSERT kannst du neue Datensätze in eine Tabelle eintragen.\nDatensätze eintragen Füge einen neuen Datensatz in die Tabelle Mitarbeiter ein.\nUSE [MeineNeueDatenbank]; INSERT INTO Mitarbeiter VALUES (\u0026#39;Martin\u0026#39;, \u0026#39;Hofer\u0026#39;, \u0026#39;IT Support\u0026#39;, \u0026#39;mhofer@example.com\u0026#39;) ; Du kannst nun den neuen Eintrag in deiner Tabelle sehen.\nNutze SELECT um dir alle Einträge anzuzeigen.\nDatensätzen gezielt eintragen Im letzten Beispiel hast du die Werte (Values) für deinen neuen Datensatz nach der Position der Spalten in deiner Tabelle eingetragen. Die erste Spalte in deiner Tabelle ist FirstName, also ist der erste Wert in deiner Abfrage der Vorname, usw.. Dein Datenbanksystem trägt die Werte also anhand ihrer Position in deiner Abfrage ein.\nIm nächsten Beispiel siehst du, wie du die Spalten selbst bestimmen kannst. Du kannst damit zum Beispiel nur bestimmte Spalten ausfüllen (sofern es deine Regeln erlauben — NOT NULL?) Oder du kannst die Reihenfolge ändern, wenn du beispielsweise zuerst die Email Adresse eintragen möchtest.\nINSERT INTO Mitarbeiter (Email, Vorname, Nachname) VALUES (\u0026#39;mpichler@example.com\u0026#39;, \u0026#39;Mathias\u0026#39;, \u0026#39;Pichler\u0026#39;), (\u0026#39;sscherer@example.com\u0026#39;, \u0026#39;Stefan\u0026#39;, \u0026#39;Scherer\u0026#39;) ; Du hast nun zwei neue Datensätze in deine Tabelle eingetragen.\nLasse dir die Einträge mit SELECT anzeigen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/use/","title":"Der USE Befehl","tags":[],"description":"","content":" Mit USE kannst du eine Datenbank auswählen.\nDu kannst damit sicherstellen, dass Anweisungen auf der gewünschten Datenbank ausgeführt werden und nicht auf der falschen Datenbank.\nDu kannst die aktive Datenbank auch mit dem Drop-Down Feld im Management Studio auswählen. USE hat den gleichen Effekt.\nDatenbank mit dem Management Studio auswählen Öffne ein neues Query mit New Query.\nWähle nun die master Datenbank im Drop-Down Feld, und führe folgende Anweisung aus.\nCREATE TABLE MitarbeiterKopie ( MitarbeiterID int IDENTITY (1,1) NOT NULL, Vorname nvarchar(50) NOT NULL, Nachname nvarchar(50) NOT NULL, Job nvarchar(50) NULL, Email nvarchar(50) NOT NULL ); Die Tabelle MitarbeiterKopie wurde nun in der master Datenbank erstellt.\nDatenbank mit USE auswählen Mit USE kannst du die Datenbank direkt in deiner Anweisung bestimmen. Du brauchst dann das Drop-Down Feld nicht mehr und kannst dir sicher sein, dass die richtige Datenbank ausgewählt ist.\nUSE [MeineNeueDatenbank]; CREATE TABLE MitarbeiterKopie ( MitarbeiterID int IDENTITY (1,1) NOT NULL, Vorname nvarchar(50) NOT NULL, Nachname nvarchar(50) NOT NULL, Job nvarchar(50) NULL, Email nvarchar(50) NOT NULL ); Die Tabelle wurde nun in der MeineNeueDatenbank Datenbank erstellt.\nLösche nun noch die Tabelle MitarbeiterKopie aus der master Datenbank.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/flat-file-database/","title":"Flatfile Datenbank","tags":[],"description":"","content":" Schauen wir uns nun unsere erste konkrete Form einer Datenbank an — die Flatfile Datenbank.\nEine Flatfile Datenbank ist eine einfache Datenstruktur, die meist ohne DBMS eingesetzt wird. Es werden Strukturen und Regeln für Daten festgelegt. Die Daten werden dann in einer einfachen Textdatei (Flatfile) gespeichert.\nComma-separated values (CSV) Dateien sind beliebte Flatfile Datenbanken. Vielleicht hast du schon einmal eine solche .csv Datei gesehen.\nStruktur einer Flatfile Datenbank Eine Flatfile Datenbank besteht aus…​\neiner einfachen Tabelle\nmit Zeilen (Rows) und Spalten (Columns/Fields).\nZeilen speichern Datensätze zu einem einzelnen Objekt, zum Beispiel eine Person.\nSpalten speichern die Attribute des Objektes, zum Beispiel die Adresse einer Person.\nFlatfile Datei (CSV)\nEine Flatfile Datenbank Datei beispiel.csv sieht zum Beispiel so aus:\nName,Adresse Andreas,Hauptstraße 17 Wals-Siezenheim Salzburg 5071 Peter,Maria-Theresien-Straße 18 Innsbruck Tirol 6020 Michael,Hauptstraße 1 Linz Oberösterreich 4041 Wolfgang,Dorfplatz 1 Fuschl am See Salzburg 5330 Die Trennzeichen (Delimiter), hier ein Komma (,), markieren die einzelnen Spalten der Tabelle. Wir haben hier also eine Tabelle mit den Spalten Name und Adresse. Und wir haben vier Datensätze, die Daten von vier Personen, eingetragen.\nWas ist ein Datensatz? Ein Datensatz ist eine konkrete Kombination von Attributwerten. Zum Beispiel ist die folgende Zeile Andreas,Hauptstraße 17 Wals-Siezenheim Salzburg 5071 aus unsere Tabelle ein Datensatz. Dieser Datensatz besteht aus den Werten der Attribute Name und Adresse.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/6-advanced-concepts/indexes/","title":"Indizes","tags":[],"description":"","content":" Ein Index oder mehrere Indizes beschleunigen das Suchen und Abfragen von Daten in deiner Datenbank.\nWas ist ein Index? Du kannst dir das als eine Art Inhaltsverzeichnis wie in einem Buch vorstellen. Wenn du eine bestimmte Information in einem Buch ohne Inhaltsverzeichnis finden möchtest, musst du jede Seite einzeln anschauen, bis du die gewünschte Information gefunden hast. Im Inhaltsverzeichnis kannst du dir einfach und schnell die passende Seitenzahl heraussuchen und öffnest die Seite direkt. Ähnlich ist das auch bei Datenbanken.\nWenn du eine Spalte als Primary Key festlegst, wird vom Datenbanksystem automatisch ein Index für diese Spalte angelegt. Dies erlaubt es dem System, schnell und effizient Beziehungen zwischen Tabellen abzurufen.\nWir können aber auch eigene Indizes anlegen. Das ist immer dann sinnvoll, wenn du Daten aus bestimmten Spalten oft abfragen, suchen oder filtern möchtest.\nEinen eigenen Index anlegen Wir legen nun einen neuen Index für unsere Kunden Tabelle an.\nÖffne im Management Studio die Tabelle Kunden. Klicke mit der rechten Maustaste auf den Punkt Indexes und wähle New Index \u0026gt; Non-Clustered Index…​. Es öffnet sich ein neues Fenster in dem wir den Index anlegen können.\nFüge nun zuerst eine Index Key Spalte mit Add…​ hinzu. Wähle die Spalte Nachname aus und bestätige mit OK.\nÄndern den Namen des Indexes beim Punkt Index name auf: IX_Kunden_Nachname, damit du ihn später wiederfindest.\nSpeichere deine Änderungen mit OK. Du siehst jetzt einen neuen Index unter Indexes.\nDer Index wird nun Suchen und Abfragen mit der Spalte Nachname erheblich beschleunigen. Unsere Beispieldatenbank ist noch sehr klein, du wirst hier also noch nicht direkt etwas von dieser Verbesserung merken. Aber, wenn deine Datenbank einmal größer wird und du darin hunderte, tausende oder mehr Kunden gespeichert hast, wirst du den Effekt deutlich spüren.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/sql-managment-studio/","title":"SQL Management Studio","tags":[],"description":"","content":" Das SQL Server Management Studio (SSMS) ist eine graphische Benurzerschnittstelle und dein Hauptwerkzeug, wenn du mit Microsoft SQL Server DBMS Instanzen arbeitest.\nDu kannst damit…​\nInstanzen verwalten\nDatenbanken anlegen und löschen\nDaten abfragen, erfassen, ändern und löschen\n…​\nDie meisten Aktionen im Management Studio kannst du mit einem Rechtsklick auf ein Objekt ausführen. Objekte sind zum Beispiel Datenbanken, Benutzer, Tabellen, und mehr.\nMit einer Instanz verbinden Wenn du das Management Studio öffnest, siehst du zunächst eine Anmeldemaske.\nUnter Server type kannst du verschiedene Datenbank Services auswählen. Stelle hier Database Engine ein, um dich zur Hauptkomponente deiner Instanz zu verbinden.\nBei Server name trägst du den Netzwerknamen deiner Instanz ein zum Beispiel sqlinstance.westeurope.azurecontainer.io\nMit Authentication wählst du aus, wie du dich an deiner Instanz anmelden möchtest. Wähle hier SQL Server Authentication aus gib deinen Usernamen und das Password an.\nNun kannst du dich mit einem Klick auf Connect mit deiner Instanz verbinden.\nDie Benutzeroberfläche Im Object Explorer siehst du nun deine Datenbank Instanz. Du siehst den Instanznamen, die DBMS Version und den Benutzernamen, mit dem du verbunden bist. In der Baumstruktur siehst du außerdem alle Objekte deiner Instanz, zum Beispiel die Datenbanken.\nDu kannst sämtliche Fenster innerhalb des Management Studios mit Klicken und Ziehen neu anordnen. Die Fenster lassen sich außerdem verstecken, anpinnen und schließen.\nSolltest du einmal versehentlich ein Fenster geschlossen oder verschoben haben, kannst du die Standardansicht wiederherstellen. Klicke dazu in der Menüleiste auf Window › Reset Window Layout.\nDen Object Explorer und einige andere Ansichten findest du außerdem im Menü View.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/alter/","title":"Der ALTER Befehl","tags":[],"description":"","content":" Mit ALTER kannst du existierende Objekte ändern.\nEine Spalten in eine Tabelle einfügen Mit ALTER und ADD kannst du zum Beispiel eine neue Spalte in eine Tabellen einfügen.\nÖffne dazu ein neues Query.\nUSE [MeineNeueDatenbank]; ALTER TABLE MitarbeiterKopie ADD Gehalt money; Prüfe die Abfrage und führe sie aus.\nDu siehst nun die neue Spalte Gehalt in der Tabelle MitarbeiterKopie.\nMehrere Spalten einfügen Du kannst auch mehrere Spalten auf einmal hinzufügen.\nUSE [MeineNeueDatenbank]; ALTER TABLE MitarbeiterKopie ADD ZweiterVorname nvarchar(50), BonusProzent int, LeistungsBewertung int ; Prüfe die Abfrage und führe sie aus.\nDu hast nun drei weitere Spalten in die Tabelle eingefügt.\nSpalten aus aus einer Tabellen entfernen Mit ALTER und DROP COLUMN kannst du Spalten aus Tabellen entfernen.\nÖffne ein neues Query.\nUSE [MeineNeueDatenbank] ALTER TABLE MitarbeiterKopie DROP COLUMN Gehalt, ZweiterVorname, BonusProzent, Leistungsbewertung ; Prüfe die Abfrage und führe sie aus.\nDu hast nun die Spalten aus deiner Tabelle entfernt.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/update/","title":"Der UPDATE Befehl","tags":[],"description":"","content":" Mit UPDATE kannst du Datensätze in einer Tabelle ändern.\nEinen Datensatz ändern Wir möchten nun einen Datensatz in der Tabelle Mitarbeiter ändern.\nÖffne ein neues Query.\nÄndere nun die Email Adresse von Martin Hofer von mhofer@example.com auf itsupport@example.com\nUSE [MeineNeueDatenbank]; UPDATE Mitarbeiter SET Email = \u0026#39;itsupport@example.com\u0026#39; WHERE Email = \u0026#39;mhofer@example.com\u0026#39;; Beachte die WHERE Klausel. Ohne diesen Filter würdest du alle Email Adressen in deiner Tabelle auf itsupport@example.com ändern. Mit WHERE legst du den genauen Datensatz fest, den du ändern möchtest.\nDu hast nun die Email von Martin Hofer geändert. Lasse dir die Datensätzen mit SELECT anzeigen.\nMehrere Datensätze ändern Es kann ab und an nützlich sein, wenn du UPDATE Befehle ohne WHERE schreibst. Zum Beispiel dann, wenn du eine neue Spalte mit demselben Anfangswert befüllen möchtest.\nALTER TABLE Mitgarbeiter ADD Teilzeit char(4); SELECT * FROM Mitarbeiter; UPDATE Mitarbeiter SET Teilzeit = \u0026#39;nein\u0026#39;; Damit fügst du eine neue Spalte Teilzeit ein und befüllst diese für jeden Datensatz mit dem Anfangswert nein. Lasse dir nun die Datensätzen mit SELECT anzeigen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/","title":"Die SQL Sprache","tags":[],"description":"","content":" Die Sprache der Datenbanken SQL "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/import-database/","title":"Eine Datenbank hinzufügen","tags":[],"description":"","content":" Es ist nun an der Zeit, dass du deine erste Datenbank in die Instanz einbindest.\nDeine Instanz besteht aktuell nur aus den System Datenbanken. Die System Datenbanken enthalten Daten für die Instanz selbst. Dort sind Beispielsweise alle SQL User und Logins eingetragen.\nUser Datenbanken dagegen sind alle selbst erstellten Datenbanken. Dort sind deine eigenen Daten oder die Daten von Anwendungen gespeichert. Eine Instanz kann mehrere User Datenbanken verwalten.\nUser Datenbanken müssen entweder neu angelegt oder importiert werden.\nEine Datenbank Importieren Die einfachste und gängigste Methode, eine Datenbank zu importieren ist, die Datenbank aus einer Backup Datei wiederherzustellen.\nBackup Dateien von Datenbanken haben normalerweise die Dateiendung .bak. Du findest das Backup einer Datenbank bei den Beispielen (example_database.bak).\nDiese möchten wir jetzt einbinden.\nKlicke mit der rechten Maustaste auf Databases › Restore Databases…​\nBeim Punkt Source, wähle Device aus\nKlicke auf […​] und im nachfolgenden Fenster auf Add um eine Backup Datei auszuwählen\nBestätige nun alle Fenster mit OK um den Restore Prozess zu starten\nDu siehst nun eine neue Datenbank im Object Explorer unter Databases. Das ist deine erste User Datenbank.\nDie Datenbank öffnen Du kannst die Objekte deiner Datenbank im Object Explorer sehen und öffnen.\nDie Tabellen der Datenbank findest du unter dem Punkt Tables.\nDie Spalten einer Tabelle siehst du unterhalb der Tabelle bei Columns\nNun schauen wir uns die Datensätze einer Tabelle an.\nKlicke dazu mit der rechten Maustaste auf eine Tabelle und wähle Select Top 1000 Rows aus.\nEs erscheint ein neues Fenster. Im oberen Teil siehst du eine automatisch erstellte SQL Abfrage (Query). Im unteren Teil siehst du das Ergebnis deiner Abfrage. Du siehst außerdem noch eine Statuszeile mit dem aktuellen Stand der Abfrage: Query executed successfully\nDie Abfrage zeigt dir die ersten 1000 Datensätze der Tabelle an.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/hierarchical-databases/","title":"Hierarchische Datenbank","tags":[],"description":"","content":" Du hast gesehen, dass eine Flatfile Datenbank aus einer Tabelle besteht.\nEine hierarchische Datenbank besteht dagegen aus mehreren Tabellen, die in Beziehungen zueinander stehen.\nDie Beziehungen der einzelnen Tabellen sind in einer Hierarchie angeordnet. Das bedeutet, die Tabellen stehen in einer sogenannten Eltern \u0026gt; Kind (Parent \u0026gt; Child) Beziehung zueinander.\nStruktur einer hierarchischen Datenbank Eine hierarchische Datenbank besteht aus…​\nmehreren Tabellen\ndie in Beziehung zueinander stehen.\nDie Beziehungen sind immer Parent \u0026gt; Child Beziehungen.\nParent Tabellen können auf mehrere Child Tabellen verweisen.\nJede Child Tabelle hat nur eine Parent Tabelle.\nBeispiele Hier siehst du einige Beispiele für hierarchischer Strukturen.\nFamilienstammbaum\ngraph TD Eltern --- Kind-1 --- Enkelkind Eltern --- Kind-2 Organigramm eines Unternehmens\ngraph TD Geschäftsführer --- Abteilungsleiter-IT --- Teamleiter-IT --- Mitarbeiter-IT Geschäftsführer --- Abteilungsleiter-Verkauf --- Teamleiter-Verkauf --- Mitarbeiter-Verkauf Ordnerstruktur eines Windows Dateisystems\ngraph TD C --- Windows --- System32 Windows --- Temp C --- Users --- user1 --- Dokumente Users --- administrator --- Desktop C --- Programme --- SQL-Server Programme --- Microsoft-Excel Hierarchische Datenbanken zeigen dir, wie Daten in einem Gesamtsystem eingeordnet sind. Du kannst erkennen, welche Daten vor und nach einem Datensatz angeordnet sind und mit welchen anderen Daten er in Beziehung steht.\nDu kannst die Beziehung zwischen einzelnen Tabellen sehen indem du, ausgehend von einer Tabelle, den Baum nach oben gehst, bis du einen gemeinsamen Verwandten erreichst. Nun folgst du ausgehend vom gemeinsamen Verwandten einen anderen Zweig des Baumes nach unten zu weiteren Tabellen.\nGrenzen hierarchischer Strukturen Mit hierarchischen Strukturen lassen sich nur einfache Parent \u0026gt; Child Beziehungen abbilden. Du kannst nur das Darunter und das Darüber darstellen.\nAlles, was du nicht gut in einem Baumdiagramm abbilden kannst, passt nicht in eine hierarchische Datenbank.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/6-advanced-concepts/naming-conventions/","title":"Namenskonventionen","tags":[],"description":"","content":" Bevor du neue Datenbanken erstellst, ist es wichtig, dass du dir zunächst ein paar Gedanken über sinnvolle Namen für deine Objekte (Datenbank, Tabellen, Spalten, …​) machst. Du erleichterst dir damit das Schreiben von SQL Abfragen und die gesamte Arbeit mit Datenbankobjekten.\nBeispiele Hier sind einige Beispiele, die dir dabei als Orientierung dienen sollen:\nNutze keine Leerzeichen und keine Sonderzeichen. Beispiel: EmailAdresse, nicht E-Mail Adresse\nNutze PascalCase für die Namen deiner Objekte und halte dich konsequent daran. Beispiel: KundenNummer oder kundenNummer, nicht kundennummer oder KUNDENNUMMER\nNutze entweder Plural oder Singular für deine Namen, aber nicht beides zusammen. Beispiel: Entweder Tabelle Produkte, Kunden oder Tabelle Produkt, Kunde, aber nicht Tabelle Produkt, Kunden.\nNutze keine reservierte Namen wie zum Beispiel SQL-Befehle. Beispiel: Nenne deine Tabelle nicht Select und deine Spalte nicht Create\nNamen von Tabellen sollten ihren Inhalt widerspiegeln, aussagekräftig und einzigartig in der Datenbank sein Beispiel: Nenne deine Tabelle Mitarbeiter nicht Personen\nDie Goldene Regel Für welche Namen du dich auch immer entscheidest:\nEntscheide dich einmal für eine Konvention und bleibe dann konsequent dabei.\nDas erleichter nicht nur dir selbst die Arbeit. Du hilfst damit auch anderen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/delete/","title":"Der DELETE Befehl","tags":[],"description":"","content":" Mit DELETE kannst du Datensätze aus einer Tabelle löschen.\nDu hast bereits den Befehl TRUNCATE kennengelernt, mit dem du alle Datensätze aus einer Tabelle entfernen kannst.\nMit dem DELETE Befehl kannst du einzelne Datensätze aus einer Tabelle löschen. Der Unterschied zwischen dem DELETE und dem TRUNCATE Befehl ist, dass du mit DELETE den WHERE Filter nutzen kannst um genau zu bestimmen, welche Datensätze gelöscht werden sollen.\nDatensätze löschen Öffne ein neues Query.\nEntferne zuerst die gesamte Tabelle KundenKopie und erstelle sie erneut aus der Tabelle Kunden\nUSE [MeineNeueDatenbank]; DROP TABLE KundenKopie; SELECT * INTO KundenKopie FROM Kunden; Lasse dir die Datensätze der Tabelle mit SELECT anzeigen.\nSELECT * FROM KundenKopie Lösche den Datensatz des Kunden mit der ID 5 aus der Tabelle\nDELETE FROM KundenKopie WHERE KundenID = 5 Lasse dir die Datensätze der Tabelle mit SELECT anzeigen.\nLösche nun alle Kunden mit einer ID größer als 6.\nDELETE FROM KundenKopie WHERE KundenID \u0026gt; 6 Lasse dir die Datensätze der Tabelle mit SELECT anzeigen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/drop/","title":"Der DROP Befehl","tags":[],"description":"","content":" Mit DROP kannst du existierende Objekte löschen.\nDu kannst damit nicht nur Spalten aus Tabellen entfernen, sondern auch ganze Tabellen oder sogar ganze Datenbanken löschen. Sei also vorsichtig mit diesem Befehl.\nEine Tabelle entfernen Öffne ein neues Query.\nUSE [MeineNeueDatenbank] DROP TABLE MitarbeiterKopie; Prüfe die Abfrage und führe sie aus.\nDu hast nun die Tabelle MitarbeiterKopie aus der Datenbank entfernt.\nDu kannst Objekte nur entfernen, wenn das Objekt keine Abhängigkeiten zu anderen Objekten mehr hat. Wenn du ein Objekt einmal nicht entfernen kannst, bekommst du eine Fehlermeldung mit dem genauen Grund dafür. Schaue dir dann die Ursache an und behebe das Problem.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/create-database/","title":"Eine neue Datenbank erstellen","tags":[],"description":"","content":" Nachdem wir eine bestehende Datenbank in die Instanz importier haben, wollen wir nun eine brandneue eigene Datenbank anlegen.\nEine neue Datenbank erstellen Klicke im Object Explorer mit der rechten Maustaste auf Databases › New Database…​.\nGib der neuen Datenbank einen Namen mit dem Feld Database name\nErstelle die Datenbank mit einem Klick auf OK\nWenn du eine Datenbank anlegst werden typischerweise zwei neue Dateien auf deiner Festplatte angelegt.\nEine Datei enthält die eigentlichen Daten deiner Datenbank (File Type: ROWS Data).\nDie andere Datei enthält die Transaktions-Logs der Datenbank (File Type: LOG).\nWas Transaktionen sind, werden wir später noch erfahren.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/","title":"Mehr SQL","tags":[],"description":"","content":" Die Fortsetzung SQL "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/relational-databases/","title":"Relationale Datenbank","tags":[],"description":"","content":" Die relationale Datenbank ist das am häufigsten verwendete Modell zur Datenspeicherung.\nEine relationale Datenbank vereint die Konzepte der Flatfile Datenbank mit Konzepten der hierarchischen Datenbank.\nStruktur einer relationalen Datenbank Eine relationale Datenbank besteht aus…​\nmehreren Tabellen,\ndie in Beziehungen zueinander stehen,\nhat jedoch keine Einschränkungen der Beziehungen.\nDamit können wir nun komplexere Beziehungen zwischen Daten abbilden.\nWas ist eine Relation? Bei relationalen Datenbanken nutzen wir den Begriff Relation allgemein als Synonym für Tabelle.\nEine Relation oder Datenbankrelation beschreibt nicht die Beziehungen der Tabellen untereinander. Das wird häufig verwechselt und ist auch in der Fachliteratur nicht immer eindeutig dargestellt.\nFalls du also einmal etwas über Relationen ließt, achte genau darauf, was der Autor meint.\nWie sieht eine relationale Datenbank aus? Die Daten sind auf mehrere themenspezifische Tabellen aufgeteilt\nJede Tabelle beschreibt eine Gruppe von \u0026#34;Dingen\u0026#34;\nJeder Datensatz ist eindeutig durch einen Schlüssel (Key) identifizierbar\nAnstatt eine große Tabelle mit sehr vielen Spalten zu erstellen, werden die Daten auf mehrere Tabellen mit wenigen Spalten aufgeteilt. Mit Hilfe sogenannter Schlüssel (Keys) lassen sich Datensätze eindeutig identifizieren und Beziehungen zwischen einzelnen Tabellen und deren Datensätzen herstellen.\nSchlüssel Schlüssel sind Attributwerte, die genutzt werden um Datensätze voneinander unterscheiden beziehungsweise diese eindeutig identifizieren zu können. Ein Schlüssel ist also eine Spalte oder eine Gruppe von Spalten in einer Tabelle, die so ausgewählt wird, dass jeder Datensatz, über die Werte dieser Gruppe einmalig ist.\nEin Beispiel Nehmen wir als Beispiel eine Tabelle Produkte.\nTable 1. Produkte Artikel Farbe T-Shirt\nRot\nT-Shirt\nGrün\nPullover\nRot\nPullover\nGrün\nDu siehst, dass sich die Datensätze weder über die Spalte Artikel noch über die Spalte Farbe eindeutig identifizieren lassen. Es gibt nun zwei einfache Möglichkeiten, wie du die eindeutige Identifizierbarkeit erreichen kannst.\nDurch eine Kombination der beiden Spalten. Es gibt nur einen roten Pullover und nur ein rotes T-Shirt. Die Gruppe der beiden Spalten Artikel und Farbe ist damit dein Schlüssel. Man nennt dies auch einen kombinierten Schlüssel oder Verbundschlüssel\nIndem du eine neue Spalte Artikel ID einfügst und dafür sorgst, dass die IDs eindeutig sind. Die Spalte Artikel ID ist damit dein Schlüssel.\nTable 2. Produkte Artikel ID Artikel Farbe 1\nT-Shirt\nRot\n2\nT-Shirt\nGrün\n3\nPullover\nRot\n4\nPullover\nGrün\nEs kann auch sein, dass eine Spalte schon von natur aus immer eindeutige Werte beinhaltet. Zum Beispiel ist eine Sozialversicherungsnummer immer einmalig. Es gibt keine zweite Nummer mit demselben Wert.\nHier einige weitere Beispiele von Attributen, deren Werte direkt als Schlüssel genutzt werden können.\nKontonummer bei einer Bank\nISBN-Nummer eines Buches\nArtikelnummer von Produkten\nJeder dieser Attribute repräsentiert eindeutig identifizierbare Daten.\nEin Konto gehört zum Beispiel genau einer Person. Es gibt keine zweite Person mit derselben Kontonummer. Ein Buch hat genau eine ISBN-Nummer. Es gibt kein zweites Buch mit derselben ISBN-Nummer.\nBeispiel einer relationale Datenbank Nehmen wir als Beispiel eine Tabelle (Relation), die unsere Kunden (Objekte) darstellt.\nIn den Spalten erfasst du Name und Adresse zusammen mit allen weiteren Daten, die du benötigst (Attribute). Außerdem fügst du du noch eine ID Spalte ein, mit der du jeden Kunden eindeutig identifizieren kannst (Schlüssel).\nTable 3. Kunden Kunde ID Name Adresse …​ 1\nAndreas\nHauptstraße 17 Wals-Siezenheim Salzburg 5071\n…​\n2\nPeter\nMaria-Theresien-Straße 18 Innsbruck Tirol 6020\n…​\n3\nMichael\nHauptstraße 1 Linz Oberösterreich 4041\n…​\n4\nWolfgang\nDorfplatz 1 Fuschl am See Salzburg 5330\n…​\nNun legst du du noch eine weitere Tabelle an, die Produkte beinhaltet. Jedes Produkt ist ein eigener Datensatz und hat auch hier eine ID als Schlüssel.\nTable 4. Produkte Produkt ID Produkt Name Farbe …​ P01\nT-Shirt\nRot\n…​\nP02\nT-Shirt\nGrün\n…​\nP03\nT-Shirt\nBlau\n…​\nP04\nPullover\nSchwarz\n…​\nP05\nPullover\nGrau\n…​\nJetzt möchtest du gerne einen Bestellvorgang beschreiben. Ein Kunde kauft zum Beispiel ein Produkt und du möchtest die Daten später auf einer Rechnung ausgeben.\nDu legst nun eine weitere Tabelle an. Dort verknüpfst du die Datensätze aus den anderen Tabellen mit hilfe der Schlüssel miteinander.\nTable 5. Bestellungen Bestellung ID Produkt ID Kunde ID …​ B01\nP03\n1\n…​\nB02\nP04\n2\n…​\nB03\nP02\n2\n…​\nB04\nP05\n4\n…​\nB05\nP05\n3\n…​\nKannst du herausfinden…​\nwer die Rechnung für Bestellung 2 bekommt?\nwie oft der graue Pullover bestellt worden ist?\nwelches Produkt Peter bei dir gekauft hat?\nWenn du deine Daten auf diese Weise in getrennte Tabellen aufteilst, kannst du die Datensätze später flexibel und einfach kombinieren. Deine Daten lassen sich so auf fast jede beliebige Art neu darstellen.\nDu kannst so Fragen beantworten, die du heute noch nicht kennst. Zum Beispiel, in welchem Bundesland werden die meisten grauen Pullover gekauft?\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/6-advanced-concepts/schemas/","title":"Schemas","tags":[],"description":"","content":" Dir ist vielleicht aufgefallen, dass jedesmal wenn wir eine Tabelle erstellt haben die Buchstaben dbo vor dem Tabellennamen automatisch vom Datenbanksystem eingetragen wurden.\ndbo steht für Datenbankbesitzer (Database Owner). Wenn wir Objekte erstellen, markiert das Datenbanksystem dieses Objekt mit der Identifikation der Person, die dieses Objekt besitzt.\nDiese Markierung wird Schema genannt. Schemas werden genutzt um Tabellen in logische Gruppen einzuteilen.\nEin Beispiel In einer Firma könnte zum Beispiel die Abteilung \u0026#34;Verkauf\u0026#34; einige Kunden haben, über die sie Daten erfassen und die Abteilung \u0026#34;Werbung\u0026#34; erfasst ihre eigenen Kunden.\nSchemas machen es einfach festzulegen und zu erkennen, welche Tabellen zu welcher Abteilung gehören.\nEigene Schemas erstellen Wir können eigene Schemas erstellen, um unsere Tabellen zu organisieren.\nÖffne im Management Studio unter deiner Datenbank den Punkt Security. Klicke mit der rechten Maustaste auf Schemas und wähle New Schema…​\nGib dem Schema einen Namen: verkauf. Lege den Besitzer für dieses Schema mit dem Punkt Schema owner fest: dbo\nBestätige deine Eingaben mit OK Unter dem Punkt Schemas kannst du nun dein neues Schema sehen.\nErstelle nun eine neue Tabelle mit einer Spalte KundenID. Im Editor der Tabelle, gehe im Menü auf View › Properties Window oder drücke die Taste F4. Im Properties Fenster unter Schema kannst du nun dein neues Schema eintragen, um die Tabelle mit diesem Schema zu verknüpfen.\nSpeichere deine Einstellungen und die Tabelle unter dem Namen Kunden. Du siehst nun eine neue Tabelle Kunden unter dem neuen Schema: verkauf.Kunden\nMit der Hilfe von Schemas kannst du so deine Daten und Tabellen besser organisieren.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/merge/","title":"Der MERGE Befehl","tags":[],"description":"","content":" Mit MERGE kannst du zwei Tabellen miteinander vergleichen und die Unterschiede in den Datensätzen entweder ergänzen, löschen oder überschreiben.\nDer MERGE Befehl ist etwas komplizierter als die übrigen Befehle, die du bisher kennengelernt hast.\nÄnderungsdaten erstellen Öffne ein neues Query.\nErstelle eine neue Tabelle KundenUpdates.\nUSE [MeineNeueDatenbank]; CREATE TABLE KundenUpdates ( KundenID int NOT NULL, Vorname nvarchar(50), Nachname nvarchar(50), Telefonnummer nchar(30), Adresse nvarchar(255), Stadt nvarchar(50), Bundesland nchar(50), Postleitzahl nchar(4) ); Füge der Tabelle einige Datensätzen als Beispiele hinzu.\nINSERT INTO KundenUpdates (KundenID, Adresse, Stadt, Bundesland, Postleitzahl) VALUES (1, \u0026#39;Hauptstraße 17\u0026#39;, \u0026#39;Wals-Siezenheim\u0026#39;, \u0026#39;Salzburg\u0026#39;, \u0026#39;5071\u0026#39;); INSERT INTO KundenUpdates (KundenID, Nachname) VALUES (4, \u0026#39;Pichler\u0026#39;); INSERT INTO KundenUpdates (KundenID, Telefonnummer) VALUES (3, \u0026#39;(+43) 664 555 555\u0026#39;); INSERT INTO KundenUpdates VALUES (11, \u0026#39;Peter\u0026#39;, \u0026#39;Scherer\u0026#39;, \u0026#39;(+43) 664 777 777\u0026#39;), \u0026#39;Maria-Theresien-Straße 18\u0026#39;, \u0026#39;Innsbruck\u0026#39;, \u0026#39;Tirol\u0026#39;, \u0026#39;6020\u0026#39;) Lasse dir die Datensätze der Tabelle mit SELECT anzeigen.\nWas du hier siehst sind gesammelte Änderungen an Datensätzen. Du siehst zum Beispiel der Kunde mit der ID 4 seinen Nachnamen auf Pichler ändern möchte. Du siehst auch, dass Kunde Nr 3 seine Telefonnummer ändert, usw.\nWie funktioniert der MERGE Befehl? Wir möchten nun diese Änderungen auf unsere bestehende Tabelle Kunden anwenden. Dazu benutzt du den MERGE Befehl. Schaue dir das folgende Beispiel und die Kommentare dazu weiter unten genau an.\nMERGE Kunden (1) USING KundenUpdates (2) ON Kunden.KundenID = KundenUpdates.KundenID (3) WHEN MACTHED AND (4) KundenUpdates.Vorname IS NOT NULL THEN (5) UPDATE SET Kunden.Vorname = KundenUpdates.Vorname; (6) Der MERGE Befehl muss zuerst wissen, wohin die änderungen gespeichert werden sollen\nWir möchten die Tabelle Kunden mit der Tabelle KundenUpdates vergleichen\nWir geben an, über welche Spalten die beiden Tabellen verknüpft werden sollen\nWenn die IDs der beiden Datensätze gleich sind und (AND)\nWenn der Vorname aus der Tabelle KundenUpdates nicht NULL ist dann (THEN)\nUpdate den Vornamen in der Tabelle Kunden aus der Tabelle KundenUpdates\nWir gehen also zur Tabelle Kunden, holen uns Datensätze aus der Tabelle KundenUpdates und für jeden Kunden, bei dem die ID Nummer übereinstimmt und dessen Vorname nicht leer ist, ändern wir den Vornamen.\nÄnderungsdaten abgleichen Wir tun nun dasselbe noch für die übrigen Spalten.\nNachname\nTelefonnummer\nAdresse\nStadt\nBundesland\nPostleitzahl\nUnd hier ist nun die (fast) vollständige MERGE Anweisung.\nMERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Vorname IS NOT NULL THEN UPDATE SET Kunden.Vorname = KundenUpdates.Vorname; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Nachname IS NOT NULL THEN UPDATE SET Kunden.Nachname = KundenUpdates.Nachname; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Telefonnummer IS NOT NULL THEN UPDATE SET Kunden.Telefonnummer = KundenUpdates.Telefonnummer; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Adresse IS NOT NULL THEN UPDATE SET Kunden.Adresse = KundenUpdates.Adresse; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Stadt IS NOT NULL THEN UPDATE SET Kunden.Stadt = KundenUpdates.Stadt; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Bundesland IS NOT NULL THEN UPDATE SET Kunden.Bundesland = KundenUpdates.Bundesland; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Postleitzahl IS NOT NULL THEN UPDATE SET Kunden.Postleitzahl = KundenUpdates.Postleitzahl; Wenn keine Übereinstimmung in den Datensätze in den Tabellen gefunden wurde, also wenn ein Datensatz in der Tabelle KundenUpdates noch nicht in der Tabelle Kunden existiert, dann füge einen kompletten neuen Datensatz in die Kunden Tabelle ein.\nMERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN NOT MATCHED BY TARGET THEN INSERT (Vorname, Nachname, Telefonnummer, Adresse, Stadt, Bundesland, Postleitzahl) VALUES ( KundenUpdates.Vorname, KundenUpdates.Nachname, KundenUpdates.Telefonnummer, KundenUpdates.Adresse, KundenUpdates.Stadt, KundenUpdates.Bundesland, KundenUpdates.Postleitzahl ) Wenn du nun all diese Anweisungen ausführst, wird deine Kunden Tabelle mit den Änderungen aus der KundenUpdates Tabelle aktualisiert. Lasse dir die Änderungen mit SELECT anzeigen.\nDas war nun eine ganze Menge Code für diese Aufgabe. Aber bedenke, du musst diesen Code nur einmal schreiben und speichern. Wann immer du einen solchen Abgleich machen möchtest, führst du einfach erneut deine gespeicherte Abfrage aus.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/truncate/","title":"Der TRUNCATE Befehl","tags":[],"description":"","content":" Mit TRUNCATE kannst alle Datensätze aus einer Tabelle löschen.\nDie Datensätze werden gelöscht, aber die Spalten und andere Einstellungen bleiben bestehen. Das kann nützlich sein, wenn du zum Beispiel eine leere Tabelle brauchst, ohne diese neu anlegen zu müssen.\nDatensätze löschen Öffne ein neues Query.\nUSE [MeineNeueDatenbank] SELECT * INTO KundenKopie FROM Kunden; USE [MeineNeueDatenbank] SELECT * FROM KundenKopie; USE [MeineNeueDatenbank] TRUNCATE TABLE KundenKopie; USE [MeineNeueDatenbank] SELECT * FROM KundenKopie; Führe die Code Blöcke nacheinander aus, indem du sie einzeln markierst und dann Execute klickst.\nNach der TRUNCATE Anweisung sind alle Datensätze aus der Tabelle KundenKopie gelöscht.\nEntferne nun noch die Tabelle KundenKopie aus der Datenbank.\nUSE [MeineNeueDatenbank] DROP TABLE KundenKopie; "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/create-table/","title":"Eine Tabelle erstellen","tags":[],"description":"","content":" Deine neue Datenbank enthält noch keine Daten. Doch bevor du Daten speichern kannst, musst du zuvor Strukturen für deine Daten schaffen.\nEine Tabelle anlegen Wir erstellen also zuerst eine Tabelle.\nKlicke im Object Explorer, unter der neuen Datenbank, mit der rechten Maustaste auf Tables › Table…​\nEine Spalte hinzufügen Im folgenden Fenster legst du nun die Spalten für deine Tabelle fest. Jede Spalte bekommt einen Namen und einen Datentyp.\nDefiniere nun eine neue Spalte ProduktID:\nColumn Name Data Type ProduktID\nint\nDen Schlüssel festlegen Die Spalte ProduktID soll dein Primärschlüssel (Primary Key) für diese Tabelle sein. Zur Erinnerung, der Schlüssel dient dazu, jeden Datensatz in der Tabelle eindeutig identifizieren zu können.\nKlicke mit der rechten Maustaste auf ProduktID und wähle Set Primary Key aus. Die Spalte ist nun als Schlüssel hinterlegt.\nEine Regel für die Spalte festlegen Nun möchten wir eine Regel für die neue Spalte festlegen.\nSuche dazu im unteren Teil des Fensters (Column Properties) den Eintrag Identity Specification und ändere den Wert von (is identity) auf Yes.\nDiese Regel ist speziell für ID Spalten (Identity) gedacht. Damit musst du deine ID Spalte nicht händisch pflegen. Für jeden neuen Datensatz, den du in der Tabelle speicherst, wird automatisch eine neue ID Nummer in der Spalte ProduktID erzeugt.\nWeitere Spalten hinzufügen Füge nun folgende weitere Spalten hinzu.\nColumn Name Data Type AllowNulls ProduktID\nint\nArtikelName\nnvarchar(100)\nZielgruppe\nchar(1)\nx\nPreis\nmoney\nSpeichere die Tabelle unter dem Namen Produkte.\nDu kannst deine neue Tabelle nun im Object Explorer sehen. Falls nicht, klicke mit der rechten Maustaste auf Tables und dann auf Refresh.\nRefresh kann bei vielen Aktionen notwendig sein. Wundere dich also nicht, falls du Objekte nicht sofort siehst. Klicke einfach auf Refresh oder nutze die F5 Taste.\nEinen Datensatz in die Tabelle eintragen Klicke mit der rechten Maustaste auf die neue Tabelle Produkte und wähle Edit Top 200 Rows. Du kannst nun Daten in die Tabelle eintragen.\nIn die Spalte ProduktID kannst du nicht selbst etwas eintragen. Unsere vorher eingestellte Regel sorgt dafür, dass die Spalte automatisch befüllt wird.\nTrage nun drei Datensatz für neue Produkte in deine Tabelle ein.\nProductID ArtikelName Zielgruppe Preis T-Shirt\nM\n25\nHose\nW\n40\nPullover\n35\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/6-advanced-concepts/","title":"Fortgeschrittene Konzepte","tags":[],"description":"","content":" Fortgeschrittene Konzepte Ein Einblick "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/normalization/","title":"Normalisierung","tags":[],"description":"","content":" Die Normalisierung von Daten ist eine wichtige Grundlage zur Datenspeicherung.\nUnter Normalisierung versteht man das Aufteilen von Attributen (Spalten) in ihre kleinstmöglichen Teile. Die Abfragen von Datensätzen wird dadurch erleichtert oder oft auch damit überhaupt erst ermöglicht.\nEin Beispiel Angenommen du möchtest die Adressen von verschiedenen Kunden in einer Flatfile Datenbank speichern.\nDie Adresse eines Kunden schaut zum Beispiel so aus: Andreas Hauptstraße 17 5071 Wals-Siezenheim Salzburg Entwurf Zuerst überlegst du dir eine sinnvolle Struktur für deine Daten.\nEine Flatfile Datenbank besteht aus einer Tabelle. Das ist schon der erste Teil deiner Struktur.\nDein Objekt, ist in diesem Beispiel ein Kunde. Jede Zeile deiner Tabelle soll also einen einzelnen Kunden darstellen. Das sind deine Datensätze.\nDie Attribute des Objekts sind in diesem Fall der Name und die Adresse eines Kunden. Deine Tabelle braucht also zwei Spalten für die Attribute Name und Adresse.\nDein erster Entwurf der Tabelle schaut so aus:\nTable 1. Entwurf Name Adresse Andreas\nHauptstraße 17 Wals-Siezenheim Salzburg 5071\nPeter\nMaria-Theresien-Straße 18 Innsbruck Tirol 6020\nMichael\nHauptstraße 1 Linz Oberösterreich 4041\nWolfgang\nDorfplatz 1 Fuschl am See Salzburg 5330\nNun überlegst du dir, welche Informationen aus den Daten für dich nützlich sind.\nEs wäre zum Beispiel hilfreich, wenn du alle Kunden sehen könntest, die im selben Bundesland leben. Du möchtest also deine Datensätze (die Kunden) nach Bundesland sortieren oder filtern.\nDir wird auffallen, dass dies nicht ganz einfach ist. Wie sollst du das Bundesland aus der Spalte Adresse herausbekommen?\nNormalisierung Hier kommt nun die Normalisierung ins Spiel.\nWenn du deine Attribute in weitere Spalten zerlegst, diese also normalisierst, wird das Sortieren nach Bundesland auf einmal sehr leicht.\nDu zerlegst also die Spalte Adresse in kleinere Bestandteile und bekommst so die neuen Spalten Straße, Stadt, Bundesland und Postleitzahl.\nTable 2. Normalisierung Name Straße Stadt Bundesland Postleitzahl Andreas\nHauptstraße 17\nWals-Siezenheim\nSalzburg\n5071\nPeter\nMaria-Theresien-Straße 18\nInnsbruck\nTirol\n6020\nMichael\nHauptstraße 1\nLinz\nOberösterreich\n4041\nWolfgang\nDorfplatz 1\nFuschl am See\nSalzburg\n5330\nDurch die Normalisierung ist es nun sehr einfach, die Datensätze nach verschiedenen Kriterien zu sortieren und zu filtern.\nDu möchtest nur Kunden aus dem Bundesland Salzburg sehen? Kein Problem, du filterst die Datensätze einfach über die Spalte Bundesland.\nDu möchtest außerdem, dass Kunden mit der niedrigsten Postleitzahl immmer ganz oben in der Tabelle stehen? Auch das ist kein Probem. Du sortierst die Datensätze einfach mit der Spalte Postleitzahl\nTable 3. Gefiltert nach Bundesland Salzburg Name Straße Stadt Bundesland Postleitzahl Andreas\nHauptstraße 17\nWals-Siezenheim\nSalzburg\n5071\nWolfgang\nDorfplatz 1\nFuschl am See\nSalzburg\n5330\nVermutlich hattest du schon oft unbewusst mit Normalisierung zu tun. Sie ist unter Anderem der Grund dafür, dass du zum Beispiel bei Online Bestellungen deine Adresse immer in getrennten Feldern eingeben musst.\nSpeichern Nun speicherst du deine Daten noch in einer Flatfile Datenbank im CSV Format: beispiel_normalisiert.csv\nName,Straße,Stadt,Bundesland,Postleitzahl Andreas,Hauptstraße 17,Wals-Siezenheim,Salzburg,5071 Peter,Maria-Theresien-Straße 18,Innsbruck,Tirol,6020 Michael,Hauptstraße 1,Linz,Oberösterreich,4041 Wolfgang,Dorfplatz 1,Fuschl am See,Salzburg,5330 "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/challenge/","title":"Aufgabe","tags":[],"description":"","content":" Erstelle eine Tabelle mit SQL Anweisungen Nutze für die folgenden Aufgaben nur SQL-Befehle.\nÖffne ein neues Query und kopiere die Aufgaben in den Editor. Wenn du fertig bist, speichere deine Lösung.\n-- Verbinde dich zu deiner Datenbank aus der ersten Aufgabe. -- Entferne die Tabelle aus deiner Datenbank. -- Erstelle die gleiche Tabelle erneut. -- Füge eine neue Spalte in die Tabelle ein. "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/challenge/","title":"Aufgabe","tags":[],"description":"","content":" Nutze SQL Anweisungen für die Arbeit mit Datensätzen Nutze für die folgenden Aufgaben nur SQL-Befehle.\nÖffne ein neues Query und kopiere die Aufgaben in den Editor. Wenn du fertig bist, speichere deine Lösung.\n-- Füge drei neue Datensätze in die Tabelle deiner Datenbank aus der ersten Aufgabe ein. -- Lösche einen der neuen Datensätze. -- Frage einige Daten mit dem `SELECT` Befehl ab. "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/calculation/","title":"Berechnung von Werten","tags":[],"description":"","content":" Eine weitere wichtige Grundregel zur Speicherung von Daten ist die Regel zur Berechnung von Werten.\nDie Grundregel besagt, dass wir keine Daten speichern, die aus anderen Daten abgeleitet oder berechnet werden können. Wenn du also Werte ableiten oder berechnen kannst, speichere sie nicht in der Datenbank, sondern lasse sie vom Computer generieren.\nBeispiel In einer Excel Tabelle würdest du zum Beispiel die Funktion sum() nutzen und nicht jede Summe händisch in die Tabelle eintragen. Wenn sich nun ein Wert ändert, wird deine Summe automatisch aktualisiert.\nTable 1. Excel A B 1\n25\n2\n60\n3\n35\n4\n14\n5\n=sum(A1:A4)\nWelche Werte berechnen wir und welche können wir ableiten? Auf Datenbanken bezogen bedeutet das, dass du zum Beispiel den Endbetrag, die Summe einer Rechnung nicht als Wert in eine Tabellenspalte einträgst. Du lässt dir diesen Wert berechnen: Rechnungssumme = Produkt Preis * Bestellte Menge\nWir berechnen nicht nur Zahlen, sondern auch andere Werte So musst du zum Beispiel nicht das Alter einer Person als Wert speichern und pflegen. Stattdessen berechnest du einfach das Alter: Alter = Datum Heute - Geburtstag der Person\nText Daten dagegen können wir ableiten Benötigst du zum Beispiel die Initialen einer Person, nimmst du einfach den ersten Buchstaben aus der Spalte Vornamen und kombinierst diesen mit dem ersten Buchstaben aus der Spalte Nachnamen.\nVorname Nachname Andreas\nLongo\nInitialen: AL\nDatenbanksysteme unterstützen dich dabei und bieten dir sehr viele Möglichkeiten zum Berechnen und Ableiten von Werten. Es gibt eine SUM() Funktion, ähnlich wie in in Excel, und noch viele Weitere.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/7-end/","title":"Ende","tags":[],"description":"","content":" Das wars, du hast es geschafft Ende "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/modify-table/","title":"Tabelle anpassen","tags":[],"description":"","content":" Du hast nun eine neue Tabelle in deiner Datenbank angelegt und diese mit Daten gefüllt.\nJetzt möchtest du eine neue Spalte in diese Tabelle einfügen. Du änderst damit das Design der Tabelle.\nDesignänderungen sind mit gewissen Gefahren verbunden, sofern die Datenbank schon von anderen Benutzern oder Systemen verwendet wird. Du solltest dabei also vorsichtig sein.\nUnsere Datenbank befindet sich jedoch noch im Aufbau. Du kannst also beliebig Änderungen machen.\nDas Design einer Tabelle anpassen Klicke mit der rechten Maustaste auf die Tabelle Produkte und wähle Design…​ Du siehst nun eine ähnliche Ansicht wie beim Anlegen einer neuen Tabelle.\nEine neue Spalte einfügen Füge jetzt eine neue Spalte Beschreibung mit dem DatenType nvarchar(100) hinzu. Schließe die Ansicht wieder und speichere deine Änderungen.\nColumn Name Data Type Beschreibung\nnvarchar(100)\nSchau dir nun die Datensätze deiner Tabelle an (Select Top 1000 Rows).\nProductID ArtikelName Zielgruppe Preis Beschreibung 1\nPullover\nU\n35\nNULL\nDie Reihenfolge der Spalten ändern Nun möchtest du die Spalten in deiner Tabelle in eine anderen Reihenfolge bringen. Du möchtest Beschreibung zwischen Artikelname und Zielgruppe stehen haben.\nÖffne dazu wieder den Designer deiner Tabelle.\nKlicke auf das Pfeilsymbol vor Beschreibung, halte die Maustaste gedrückt und ziehe den Eintrag zwischen Artikelname und Zielgruppe.\nSchließe den Designer und speichere deine Änderungen.\nDu bekommst eine Fehlermeldung.\nDas Datenbanksystem muss für diese Änderung die gesamte Tabelle löschen und neu anlegen um die Spalten zu sortieren. Einen solchen Vorgang musst du explizit erlauben, denn das kann gefährlich sein für die Nutzer der Datenbank.\nUm diesen Vorgang zu erlauben, deaktiviere die folgende Einstellung im Management Studio: Tools › Options…​ › Designers › Tables and Database Designers › Prevent saving changes that requires table re-creation\nDu kannst nun die Spalten im Designer neu anordnen. Diesmal bekommst du keine Fehlermeldung beim speichern und deine Änderungen werden übernommen. Deine Tabelle wird dabei neu angelegt, die Datensätze bleiben jedoch erhalten.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/drop-database/","title":"Datenbank löschen","tags":[],"description":"","content":" Um eine Datenbank zu löschen, klicke mit der Rechten Maustaste auf den Namen der Datenbank und wähle Delete aus. Im folgenden Fenster solltest du noch Close existing connections aktivieren.\nEine Datenbank kann erst gelöscht werden, wenn keine Verbindungen mehr auf die Datenbank bestehen. Das können zum Beispiel andere Benutzer sein, die die Datenbank verwenden.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/2-databases/datatypes-and-rules/","title":"Datentypen und Regeln","tags":[],"description":"","content":" Bevor du nun dein neues Wissen in die Praxis umsetzen kannst, solltest du noch zwei wichtige Konzepte kennenlernen.\nDatentypen Datentypen sind ein grundlegender Bestandteil jedes Computersystems. In der ein oder anderen Form begegnen sie dir überall, zum Beispiel bei Programmiersprachen oder auch bei Datenbanken.\nMit einem Datentypen beschreiben wir die Art, also den Typ eines Datenwertes. Wir legen beispielsweise fest, dass der Wert Salzburg ein Text ist und der Wert 1000 eine Zahl.\nHier ein paar Beispiele geläufiger Datentypen:\nGanze Zahl: int\n(Text) Zeichenkette: char\nDatum: date\nWährung: money\n…​\nDatentypen legen also das Format eines Wertes fest.\nDatentypen in unseren Datenbanken In einer Tabelle legst du für jede Spalte einen Datentyp fest.\nDie Datentypen stellen sicher, dass Daten konsistent in die Tabelle eingegeben werden. Sie schützen dich damit vor der Eingabe falscher Daten.\nIn eine Spalte mit dem Typ Ganzzahl int kannst du zum Beispiel nicht den Namen einer Person eingeben. Für den Namen einer Person benötigst du eine Spalte mit dem Datentyp Variable Zeichenkette varchar.\nBevor du eine Spalten in einer Tabelle anlegst, musst du dir also zunächst Gedanken darüber machen, welche Art von Daten du in der Spalte speichern möchtest.\nSoll deine Spalte Nummern enthalten?\nMöchtest du ganze Zahlen eintragen?\nMöchtest du negative Zahlen eintragen?\nSoll deine Spalte Text enthalten?\nWie lang darf der Text sein?\nMöchtest du Sonderzeichen wie € oder ß eintragen?\nJe nach Art der Daten benötigst du einen anderen Datentyp. Die Frage nach den Datentypen hilft dir dabei, eine gut strukturierte Datenbank aufzubauen.\nRegeln Mit Regeln (Constraints) kannst du, zusätzlich zu den Datentypen, weitere Regeln festlegen, die deine Daten einhalten müssen, bevor sie in einer Tabelle gespeichert werden können.\nDu kannst zum Beispiel festlegen, dass es in einer Spalte keine doppelten Einträge geben darf. Constraints schützen dich damit, wie auch die Datentypen, vor der Eingabe falscher Daten.\nHier einige Beispiele verschiedener Constraints:\nUnique constraints: \u0026#34;Erlaube keine doppelten Werte in einer Spalte.\u0026#34;\nCheck constraints: \u0026#34;Das Versanddatum darf nicht vor dem Datum einer Bestellung liegen.\u0026#34;\nDefault values: Werte, die automatisch eingetragen werden, wenn kein anderer Wert angegeben ist. \u0026#34;In der Spalte Land soll zu Beginn immer Österreich stehen.\u0026#34;\nNOT NULL constraint: Darf der Wert einer Spalte leer sein oder muss er befüllt werden?\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/4-sql-language/solution/","title":"Lösung","tags":[],"description":"","content":" Erstelle eine Tabelle mit SQL Anweisungen -- Verbinde dich zu deiner Datenbank aus der ersten Aufgabe. USE BuecherAlongo; -- Entferne die Tabelle aus deiner Datenbank DROP TABLE BuchStandort; -- Erstelle die gleiche Tabelle erneut CREATE TABLE BuchStandort ( Titel nvarchar(100) NOT NULL, Autor nvarchar(100) NOT NULL, RaumNummer nvarchar(50) NOT NULL, RegalNummer int NOT NULL ); -- Füge eine neue Spalte in die Tabelle ein ALTER TABLE BuchStandort ADD ISBN char(13) NULL; "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/5-more-sql/solution/","title":"Lösung","tags":[],"description":"","content":" Nutze SQL Anweisungen für die Arbeit mit Datensätzen -- Füge drei neue Datensätze in die Tabelle deiner Datenbank aus der ersten Aufgabe ein. USE BuecherAlongo; INSERT INTO BuchStandort (Titel, Autor, RaumNummer, RegalNummer) VALUES (\u0026#39;Windows Server 2019\u0026#39;, \u0026#39;Peter Kloep\u0026#39;, 102, 2), (\u0026#39;Linux\u0026#39;, \u0026#39;Michael Kofler\u0026#39;, 201, 1), (\u0026#39;Sichere Windows-Infrastrukturen\u0026#39;, \u0026#39;Karsten Weigel\u0026#39;, 310, 5); SELECT * FROM BuchStandort; -- Lösche einen der neuen Datensätze. DELETE FROM BuchStandort WHERE Titel = \u0026#39;Windows Server 2019\u0026#39;; -- Frage einige Daten mit dem `SELECT` Befehl ab. SELECT * FROM BuchStandort WHERE Autor = \u0026#39;Michael Kofler\u0026#39;; SELECT * FROM BuchStandort WHERE RaumNummer = 310; SELECT * FROM BuchStandort WHERE Titel LIKE \u0026#39;%windows%\u0026#39;; "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/views/","title":"Datenbank Views","tags":[],"description":"","content":" In relationalen Datenbanken werden Tabellen in thematisch gruppierte Datensätze aufgeteilt, zum Beispiel die Tabellen Produkte und Kunden. Die Datensätze werden mit Hilfe von Schlüsseln (Keys) zu neuen Ansichten kombiniert, zum Beispiel die Tabelle Bestellungen.\nWas sind Datenbank Views? SQL Server nutzt sogenannte Views um Datensätze aus mehreren Tabellen zu kombinieren, ohne die Datensätze in einer eigenen Tabelle zu speichern.\nIn unserer Beispieldatenbank sehen wir einige vorbereitete Views. Du findest diese im Management Studio unterhalb der Datenbank im Punkt Views.\nSchaue dir nun die Ergebnisse eines Views mit Select Top 1000 Rows an. Du wirst sehen, dass die Ergebnisse sich nicht von einer Abfrage auf Tabellen unterscheidet.\nEs gibt jedoch einen entscheidenden Unterschied. Views speichern selbst keine Datensätze, sie sind also keine Tabellen. Views holen sich die Datensätze aus anderen Tabellen und stellen diese in einer benutzerdefinierten Ansicht zur Verfügung.\nMit eigenen Views kannst du selbst entscheiden, welche Daten du aus welchen Tabellen sehen willst und wie die Daten angeordnet sein sollen.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/system-databases/","title":"Die System Datenbanken","tags":[],"description":"","content":" Im Management Studio, unter dem Punkt Databases siehst du den Punkt System Databases. Dort befinden sich die System Datenbanken zum Beispiel master, model und tempdb. Dies sind vorgefertigte Datenbanken, die jede SQL Instanz benötigt. Sie werden bei der Installation des DBMS erstellt.\nDu wirst nur recht selten direkt mit diesen Datenbanken zu tun haben. Es ist aber hilfreich zu wissen, wozu sie gut sind.\nMaster Die master Datenbank enthält die Konfiguration und einige weitere Details deiner Instanz. Die Instanz nutzt diese für verschiedene internen Prozesse. Außerdem sind dort alle User Datenbanken eingetragen.\nWenn du also eine neue Datenbank anlegst, wird diese in der master Datenbank vermerkt:\nmaster › Views › System Views › sys.databases › Select Top 1000 Rows\nModel Die model Datenbank ist die Vorlage für alle neuen Datenbanken, die auf der Instanz angelegt werden. Wenn du Änderungen an der model Datenbank machst, bekommen alle Datenbanken, die du danach anlegst automatisch auch diese Änderungen. Das können Datenbank Einstellungen sein, aber auch vorgefertigte Inhalte in der Datenbank selbst.\nErstelle zum Beispiel eine neue Tabelle temp mit der Spalte test (int) in der model Datenbank. Lege dann eine neue, leere Datenbank an. Du siehst, deine neue Datenbank hat nun automatisch eine Tabelle temp mit der Spalte test bekommen, wie von der model Datenbank vorgegeben.\nMSDB Die msdb Datenbank wird vom SQL Server Agent verwendet. Der Agent ist für Automatisierungen zuständig. Du kannst damit zum Beispiel automatisch Backups deiner Datenbanken zu bestimmten Zeiten erstellen lassen. Der Agent wird auch für regelmäßige Wartungsarbeiten an deinen Datenbanken verwendet.\nTempDB Zuletzt gibt es noch die tempdb Datenbank. Das ist ein temporärer Speicher, den deine Instanz für verschiedene Datenprozesse verwendet. Wenn du zum Beispiel deine Tabellen mit dem Designer änderst, werden die Änderungen zuerst in der tempdb zwischengespeichert, bevor sie endgültig auf deine Datenbank übertragen werden. Die tempdb wird bei jedem Neustart der Instanz geleert und neu aufgebaut.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/challenge/","title":"Aufgabe","tags":[],"description":"","content":" Erstelle deine eigene Datenbank Du hast den Auftrag bekommen, eine neue Datenbank für deine Firma zu entwerfen.\nDeine Firma besitzt viele Bücher mit Fachwissen unterschiedlicher Bereiche. Diese Bücher sind allerdings nicht sortiert und auf viele verschiedene Räume aufgeteilt. In jedem Raum stehen ausserdem gleich mehrere Regale für Bücher.\nDas macht es sehr schwierig für die Mitarbeiter, ein bestimmtes Buch zu finden.\nErstelle eine Datenbank in der du den genauen Standort eines Buches eintragen kannst. Mit dieser Datenbank können die Mitarbeiter ihr Buch schneller finden.\nÜberlege dir, welche Informationen du benötigst und wie du diese am besten als Daten speichern kannst\nErstelle eine neue Datenbank\nErstelle eine Tabelle in der Datenbank\nFüge einige Beispiel Datensätze in deine Tabelle ein\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/3-database-server/solution/","title":"Lösung","tags":[],"description":"","content":" Erstelle deine eigene Datenbank Datenbank: BuecherAlongo\nTabelle\nTable 1. BuchStandort Column Name Data Type Allow Nulls Titel\nnvarchar(100)\nAutor\nnvarchar(100)\nRaumNummer\nint\nRegalNummer\nint\nDatensätze\nTable 2. BuchStandort Titel Autor RaumNummer RegalNummer Windows Server 2019\nPeter Kloep\n102\n2\nLinux\nMichael Kofler\n201\n1\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/","title":"Einstieg Datenbanken","tags":[],"description":"","content":" Grundlagen und Praxis für IT-Experten Einstieg Datenbanken "},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/glossary/","title":"Begriffe","tags":[],"description":"","content":" Datenbank Ein System zur elektronischen Datenverwaltung. Die wesentliche Aufgabe einer Datenbank ist es, große Datenmengen effizient, widerspruchsfrei und dauerhaft zu speichern und benötigte Teilmengen in unterschiedlichen, bedarfsgerechten Darstellungsformen für Benutzer und Anwendungsprogramme bereitzustellen.\nDatenbanksprache Formale Sprachen, die für den Einsatz in Datenbanksystemen entwickelt wurden. Eine normierte Sprache für Relationale Datenbanksysteme ist SQL.\nStructured Query Language (SQL) Eine Datenbanksprache zur Definition von Datenstrukturen in relationalen Datenbanken sowie zum Bearbeiten (Einfügen, Verändern, Löschen) und Abfragen von darauf basierenden Datenbeständen.\nData Definition Language (DDL) Ist Teil einer Datenbanksprache, der verwendet wird, um Datenstrukturen und verwandte Elemente zu beschreiben, zu ändern oder zu entfernen.\nData Manipulation Language (DML) Ist Teil einer Datenbanksprache, der verwendet wird, um Daten zu schreiben, zu lesen, zu ändern und zu löschen.\nDatenbankmanagementsystem (DBMS) Ist die eingesetzte Software, die für das Datenbanksystem installiert und konfiguriert wird.\nCSV (Dateiformat) CSV steht für Comma-separated values und beschreibt den Aufbau einer Textdatei zur Speicherung oder zum Austausch einfach strukturierter Daten. Die Dateinamensendung lautet meist .csv.\nNormalisierung Die Aufteilung von Attributen (Tabellenspalten) in mehrere Relationen (Tabellen) gemäß den Normalisierungsregeln, so dass eine Form entsteht, die keine Redundanzen mehr enthält.\nDatenbankmodell Die theoretische Grundlage für eine Datenbank und bestimmt, in welcher Struktur Daten in einem Datenbanksystem gespeichert werden. Das bekannteste und meistverbreitete Datenbankmodell ist das relationale Datenbankmodell, das tabellenbasiert ist.\nRelationale Datenbank Eine digitale Datenbank, die auf einem tabellenbasierten relationalen Datenbankmodell basiert.\n"},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://www.andreaslongo.com/training/database-fundamentals/tags/","title":"Tags","tags":[],"description":"","content":""}]